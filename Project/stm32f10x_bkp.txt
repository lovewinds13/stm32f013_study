; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\stm32f10x_bkp.o --asm_dir=.\ --list_dir=.\ --depend=.\stm32f10x_bkp.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\App\inc -I..\Driver\inc -I..\Libraries\CMSIS\Core\inc -I..\Libraries\CMSIS\Device\inc -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\HalIterface\inc -I..\User\inc -I..\Driver\src -ID:\KEIL_ARM_PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -ID:\keil_arm\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=533 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\stm32f10x_bkp.crf ..\Libraries\STM32F10x_StdPeriph_Driver\src\stm32f10x_bkp.c]
                          THUMB

                          AREA ||i.BKP_ClearFlag||, CODE, READONLY, ALIGN=2

                  BKP_ClearFlag PROC
;;;268      */
;;;269    void BKP_ClearFlag(void)
000000  4803              LDR      r0,|L1.16|
;;;270    {
;;;271      /* Set CTE bit to clear Tamper Pin Event flag */
;;;272      BKP->CSR |= BKP_CSR_CTE;
000002  8800              LDRH     r0,[r0,#0]
000004  f0400001          ORR      r0,r0,#1
000008  4901              LDR      r1,|L1.16|
00000a  8008              STRH     r0,[r1,#0]
;;;273    }
00000c  4770              BX       lr
;;;274    
                          ENDP

00000e  0000              DCW      0x0000
                  |L1.16|
                          DCD      0x40006c34

                          AREA ||i.BKP_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  BKP_ClearITPendingBit PROC
;;;289      */
;;;290    void BKP_ClearITPendingBit(void)
000000  4803              LDR      r0,|L2.16|
;;;291    {
;;;292      /* Set CTI bit to clear Tamper Pin Interrupt pending bit */
;;;293      BKP->CSR |= BKP_CSR_CTI;
000002  8800              LDRH     r0,[r0,#0]
000004  f0400002          ORR      r0,r0,#2
000008  4901              LDR      r1,|L2.16|
00000a  8008              STRH     r0,[r1,#0]
;;;294    }
00000c  4770              BX       lr
;;;295    
                          ENDP

00000e  0000              DCW      0x0000
                  |L2.16|
                          DCD      0x40006c34

                          AREA ||i.BKP_DeInit||, CODE, READONLY, ALIGN=1

                  BKP_DeInit PROC
;;;119      */
;;;120    void BKP_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;121    {
;;;122      RCC_BackupResetCmd(ENABLE);
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       RCC_BackupResetCmd
;;;123      RCC_BackupResetCmd(DISABLE);
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       RCC_BackupResetCmd
;;;124    }
00000e  bd10              POP      {r4,pc}
;;;125    
                          ENDP


                          AREA ||i.BKP_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  BKP_GetFlagStatus PROC
;;;258      */
;;;259    FlagStatus BKP_GetFlagStatus(void)
000000  4801              LDR      r0,|L4.8|
;;;260    {
;;;261      return (FlagStatus)(*(__IO uint32_t *) CSR_TEF_BB);
000002  6800              LDR      r0,[r0,#0]
000004  b2c0              UXTB     r0,r0
;;;262    }
000006  4770              BX       lr
;;;263    
                          ENDP

                  |L4.8|
                          DCD      0x420d86a0

                          AREA ||i.BKP_GetITStatus||, CODE, READONLY, ALIGN=2

                  BKP_GetITStatus PROC
;;;279      */
;;;280    ITStatus BKP_GetITStatus(void)
000000  4801              LDR      r0,|L5.8|
;;;281    {
;;;282      return (ITStatus)(*(__IO uint32_t *) CSR_TIF_BB);
000002  6800              LDR      r0,[r0,#0]
000004  b2c0              UXTB     r0,r0
;;;283    }
000006  4770              BX       lr
;;;284    
                          ENDP

                  |L5.8|
                          DCD      0x420d86a4

                          AREA ||i.BKP_ITConfig||, CODE, READONLY, ALIGN=2

                  BKP_ITConfig PROC
;;;159      */
;;;160    void BKP_ITConfig(FunctionalState NewState)
000000  4901              LDR      r1,|L6.8|
;;;161    {
;;;162      /* Check the parameters */
;;;163      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;164      *(__IO uint32_t *) CSR_TPIE_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;165    }
000004  4770              BX       lr
;;;166    
                          ENDP

000006  0000              DCW      0x0000
                  |L6.8|
                          DCD      0x420d8688

                          AREA ||i.BKP_RTCOutputConfig||, CODE, READONLY, ALIGN=2

                  BKP_RTCOutputConfig PROC
;;;179      */
;;;180    void BKP_RTCOutputConfig(uint16_t BKP_RTCOutputSource)
000000  4601              MOV      r1,r0
;;;181    {
;;;182      uint16_t tmpreg = 0;
000002  2000              MOVS     r0,#0
;;;183      /* Check the parameters */
;;;184      assert_param(IS_BKP_RTC_OUTPUT_SOURCE(BKP_RTCOutputSource));
;;;185      tmpreg = BKP->RTCCR;
000004  4a04              LDR      r2,|L7.24|
000006  8810              LDRH     r0,[r2,#0]
;;;186      /* Clear CCO, ASOE and ASOS bits */
;;;187      tmpreg &= RTCCR_MASK;
000008  f64f427f          MOV      r2,#0xfc7f
00000c  4010              ANDS     r0,r0,r2
;;;188      
;;;189      /* Set CCO, ASOE and ASOS bits according to BKP_RTCOutputSource value */
;;;190      tmpreg |= BKP_RTCOutputSource;
00000e  4308              ORRS     r0,r0,r1
;;;191      /* Store the new value */
;;;192      BKP->RTCCR = tmpreg;
000010  4a01              LDR      r2,|L7.24|
000012  8010              STRH     r0,[r2,#0]
;;;193    }
000014  4770              BX       lr
;;;194    
                          ENDP

000016  0000              DCW      0x0000
                  |L7.24|
                          DCD      0x40006c2c

                          AREA ||i.BKP_ReadBackupRegister||, CODE, READONLY, ALIGN=2

                  BKP_ReadBackupRegister PROC
;;;240      */
;;;241    uint16_t BKP_ReadBackupRegister(uint16_t BKP_DR)
000000  b508              PUSH     {r3,lr}
;;;242    {
000002  4601              MOV      r1,r0
;;;243      __IO uint32_t tmp = 0;
000004  2000              MOVS     r0,#0
000006  9000              STR      r0,[sp,#0]
;;;244    
;;;245      /* Check the parameters */
;;;246      assert_param(IS_BKP_DR(BKP_DR));
;;;247    
;;;248      tmp = (uint32_t)BKP_BASE; 
000008  4803              LDR      r0,|L8.24|
00000a  9000              STR      r0,[sp,#0]
;;;249      tmp += BKP_DR;
00000c  9800              LDR      r0,[sp,#0]
00000e  4408              ADD      r0,r0,r1
000010  9000              STR      r0,[sp,#0]
;;;250    
;;;251      return (*(__IO uint16_t *) tmp);
000012  9800              LDR      r0,[sp,#0]
000014  8800              LDRH     r0,[r0,#0]
;;;252    }
000016  bd08              POP      {r3,pc}
;;;253    
                          ENDP

                  |L8.24|
                          DCD      0x40006c00

                          AREA ||i.BKP_SetRTCCalibrationValue||, CODE, READONLY, ALIGN=2

                  BKP_SetRTCCalibrationValue PROC
;;;200      */
;;;201    void BKP_SetRTCCalibrationValue(uint8_t CalibrationValue)
000000  4601              MOV      r1,r0
;;;202    {
;;;203      uint16_t tmpreg = 0;
000002  2000              MOVS     r0,#0
;;;204      /* Check the parameters */
;;;205      assert_param(IS_BKP_CALIBRATION_VALUE(CalibrationValue));
;;;206      tmpreg = BKP->RTCCR;
000004  4a04              LDR      r2,|L9.24|
000006  8810              LDRH     r0,[r2,#0]
;;;207      /* Clear CAL[6:0] bits */
;;;208      tmpreg &= RTCCR_CAL_MASK;
000008  f64f7280          MOV      r2,#0xff80
00000c  4010              ANDS     r0,r0,r2
;;;209      /* Set CAL[6:0] bits according to CalibrationValue value */
;;;210      tmpreg |= CalibrationValue;
00000e  4308              ORRS     r0,r0,r1
;;;211      /* Store the new value */
;;;212      BKP->RTCCR = tmpreg;
000010  4a01              LDR      r2,|L9.24|
000012  8010              STRH     r0,[r2,#0]
;;;213    }
000014  4770              BX       lr
;;;214    
                          ENDP

000016  0000              DCW      0x0000
                  |L9.24|
                          DCD      0x40006c2c

                          AREA ||i.BKP_TamperPinCmd||, CODE, READONLY, ALIGN=2

                  BKP_TamperPinCmd PROC
;;;146      */
;;;147    void BKP_TamperPinCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L10.8|
;;;148    {
;;;149      /* Check the parameters */
;;;150      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;151      *(__IO uint32_t *) CR_TPE_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;152    }
000004  4770              BX       lr
;;;153    
                          ENDP

000006  0000              DCW      0x0000
                  |L10.8|
                          DCD      0x420d8600

                          AREA ||i.BKP_TamperPinLevelConfig||, CODE, READONLY, ALIGN=2

                  BKP_TamperPinLevelConfig PROC
;;;133      */
;;;134    void BKP_TamperPinLevelConfig(uint16_t BKP_TamperPinLevel)
000000  4901              LDR      r1,|L11.8|
;;;135    {
;;;136      /* Check the parameters */
;;;137      assert_param(IS_BKP_TAMPER_PIN_LEVEL(BKP_TamperPinLevel));
;;;138      *(__IO uint32_t *) CR_TPAL_BB = BKP_TamperPinLevel;
000002  6008              STR      r0,[r1,#0]
;;;139    }
000004  4770              BX       lr
;;;140    
                          ENDP

000006  0000              DCW      0x0000
                  |L11.8|
                          DCD      0x420d8604

                          AREA ||i.BKP_WriteBackupRegister||, CODE, READONLY, ALIGN=2

                  BKP_WriteBackupRegister PROC
;;;221      */
;;;222    void BKP_WriteBackupRegister(uint16_t BKP_DR, uint16_t Data)
000000  b508              PUSH     {r3,lr}
;;;223    {
;;;224      __IO uint32_t tmp = 0;
000002  2200              MOVS     r2,#0
000004  9200              STR      r2,[sp,#0]
;;;225    
;;;226      /* Check the parameters */
;;;227      assert_param(IS_BKP_DR(BKP_DR));
;;;228    
;;;229      tmp = (uint32_t)BKP_BASE; 
000006  4a04              LDR      r2,|L12.24|
000008  9200              STR      r2,[sp,#0]
;;;230      tmp += BKP_DR;
00000a  9a00              LDR      r2,[sp,#0]
00000c  4402              ADD      r2,r2,r0
00000e  9200              STR      r2,[sp,#0]
;;;231    
;;;232      *(__IO uint32_t *) tmp = Data;
000010  9a00              LDR      r2,[sp,#0]
000012  6011              STR      r1,[r2,#0]
;;;233    }
000014  bd08              POP      {r3,pc}
;;;234    
                          ENDP

000016  0000              DCW      0x0000
                  |L12.24|
                          DCD      0x40006c00
