; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\stm32f10x_iwdg.o --asm_dir=.\ --list_dir=.\ --depend=.\stm32f10x_iwdg.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\App\inc -I..\Driver\inc -I..\Libraries\CMSIS\Core\inc -I..\Libraries\CMSIS\Device\inc -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\HalIterface\inc -I..\User\inc -I..\Driver\src -ID:\KEIL_ARM_PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -ID:\keil_arm\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=533 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\stm32f10x_iwdg.crf ..\Libraries\STM32F10x_StdPeriph_Driver\src\stm32f10x_iwdg.c]
                          THUMB

                          AREA ||i.IWDG_Enable||, CODE, READONLY, ALIGN=2

                  IWDG_Enable PROC
;;;147      */
;;;148    void IWDG_Enable(void)
000000  f64c40cc          MOV      r0,#0xcccc
;;;149    {
;;;150      IWDG->KR = KR_KEY_Enable;
000004  4901              LDR      r1,|L1.12|
000006  6008              STR      r0,[r1,#0]
;;;151    }
000008  4770              BX       lr
;;;152    
                          ENDP

00000a  0000              DCW      0x0000
                  |L1.12|
                          DCD      0x40003000

                          AREA ||i.IWDG_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  IWDG_GetFlagStatus PROC
;;;160      */
;;;161    FlagStatus IWDG_GetFlagStatus(uint16_t IWDG_FLAG)
000000  4601              MOV      r1,r0
;;;162    {
;;;163      FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;164      /* Check the parameters */
;;;165      assert_param(IS_IWDG_FLAG(IWDG_FLAG));
;;;166      if ((IWDG->SR & IWDG_FLAG) != (uint32_t)RESET)
000004  4a03              LDR      r2,|L2.20|
000006  68d2              LDR      r2,[r2,#0xc]
000008  400a              ANDS     r2,r2,r1
00000a  b10a              CBZ      r2,|L2.16|
;;;167      {
;;;168        bitstatus = SET;
00000c  2001              MOVS     r0,#1
00000e  e000              B        |L2.18|
                  |L2.16|
;;;169      }
;;;170      else
;;;171      {
;;;172        bitstatus = RESET;
000010  2000              MOVS     r0,#0
                  |L2.18|
;;;173      }
;;;174      /* Return the flag status */
;;;175      return bitstatus;
;;;176    }
000012  4770              BX       lr
;;;177    
                          ENDP

                  |L2.20|
                          DCD      0x40003000

                          AREA ||i.IWDG_ReloadCounter||, CODE, READONLY, ALIGN=2

                  IWDG_ReloadCounter PROC
;;;137      */
;;;138    void IWDG_ReloadCounter(void)
000000  f64a20aa          MOV      r0,#0xaaaa
;;;139    {
;;;140      IWDG->KR = KR_KEY_Reload;
000004  4901              LDR      r1,|L3.12|
000006  6008              STR      r0,[r1,#0]
;;;141    }
000008  4770              BX       lr
;;;142    
                          ENDP

00000a  0000              DCW      0x0000
                  |L3.12|
                          DCD      0x40003000

                          AREA ||i.IWDG_SetPrescaler||, CODE, READONLY, ALIGN=2

                  IWDG_SetPrescaler PROC
;;;111      */
;;;112    void IWDG_SetPrescaler(uint8_t IWDG_Prescaler)
000000  4901              LDR      r1,|L4.8|
;;;113    {
;;;114      /* Check the parameters */
;;;115      assert_param(IS_IWDG_PRESCALER(IWDG_Prescaler));
;;;116      IWDG->PR = IWDG_Prescaler;
000002  6048              STR      r0,[r1,#4]
;;;117    }
000004  4770              BX       lr
;;;118    
                          ENDP

000006  0000              DCW      0x0000
                  |L4.8|
                          DCD      0x40003000

                          AREA ||i.IWDG_SetReload||, CODE, READONLY, ALIGN=2

                  IWDG_SetReload PROC
;;;124      */
;;;125    void IWDG_SetReload(uint16_t Reload)
000000  4901              LDR      r1,|L5.8|
;;;126    {
;;;127      /* Check the parameters */
;;;128      assert_param(IS_IWDG_RELOAD(Reload));
;;;129      IWDG->RLR = Reload;
000002  6088              STR      r0,[r1,#8]
;;;130    }
000004  4770              BX       lr
;;;131    
                          ENDP

000006  0000              DCW      0x0000
                  |L5.8|
                          DCD      0x40003000

                          AREA ||i.IWDG_WriteAccessCmd||, CODE, READONLY, ALIGN=2

                  IWDG_WriteAccessCmd PROC
;;;91       */
;;;92     void IWDG_WriteAccessCmd(uint16_t IWDG_WriteAccess)
000000  4901              LDR      r1,|L6.8|
;;;93     {
;;;94       /* Check the parameters */
;;;95       assert_param(IS_IWDG_WRITE_ACCESS(IWDG_WriteAccess));
;;;96       IWDG->KR = IWDG_WriteAccess;
000002  6008              STR      r0,[r1,#0]
;;;97     }
000004  4770              BX       lr
;;;98     
                          ENDP

000006  0000              DCW      0x0000
                  |L6.8|
                          DCD      0x40003000
