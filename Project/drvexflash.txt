; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\drvexflash.o --asm_dir=.\ --list_dir=.\ --depend=.\drvexflash.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\App\inc -I..\Driver\inc -I..\Libraries\CMSIS\Core\inc -I..\Libraries\CMSIS\Device\inc -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\HalIterface\inc -I..\User\inc -I..\Driver\src -ID:\KEIL_ARM_PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -ID:\keil_arm\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=533 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\drvexflash.crf ..\Driver\src\drvexflash.c]
                          THUMB

                          AREA ||i.Flash_EraseBlock||, CODE, READONLY, ALIGN=2

                  Flash_EraseBlock PROC
;;;491    //--------------------------------------------------------------------------------------------------------
;;;492    void Flash_EraseBlock(uint32_t _ulBlockAddr)
000000  b538              PUSH     {r3-r5,lr}
;;;493    {
000002  4604              MOV      r4,r0
;;;494    	uint8_t command = FLASH_ERASE_BLOCK;
000004  20d8              MOVS     r0,#0xd8
000006  9000              STR      r0,[sp,#0]
;;;495    	_ulBlockAddr *= 65536;	//块地址,一块64K
000008  0424              LSLS     r4,r4,#16
;;;496    	
;;;497    	Flash_WriteEnable();
00000a  f7fffffe          BL       Flash_WriteEnable
;;;498    	Flash_WaitNobusy();
00000e  f7fffffe          BL       Flash_WaitNobusy
;;;499    
;;;500    	FLASH_CS_LOW;
000012  2104              MOVS     r1,#4
000014  480e              LDR      r0,|L1.80|
000016  f7fffffe          BL       GPIO_ResetBits
;;;501    	hal_spi_send_bytes(SPI_COMM_MODE, &command, 1);
00001a  2201              MOVS     r2,#1
00001c  4669              MOV      r1,sp
00001e  4610              MOV      r0,r2
000020  f7fffffe          BL       hal_spi_send_bytes
;;;502    	hal_spi_send_bytes(SPI_COMM_MODE, (uint8_t *)(_ulBlockAddr>>16), 1);
000024  0c21              LSRS     r1,r4,#16
000026  2201              MOVS     r2,#1
000028  4610              MOV      r0,r2
00002a  f7fffffe          BL       hal_spi_send_bytes
;;;503    	hal_spi_send_bytes(SPI_COMM_MODE, (uint8_t *)(_ulBlockAddr>>8), 1);
00002e  0a21              LSRS     r1,r4,#8
000030  2201              MOVS     r2,#1
000032  4610              MOV      r0,r2
000034  f7fffffe          BL       hal_spi_send_bytes
;;;504    	hal_spi_send_bytes(SPI_COMM_MODE, (uint8_t *)(_ulBlockAddr>>0), 1);
000038  2201              MOVS     r2,#1
00003a  4621              MOV      r1,r4
00003c  4610              MOV      r0,r2
00003e  f7fffffe          BL       hal_spi_send_bytes
;;;505    
;;;506    	// Spi_WriteByte(FLASH_ERASE_BLOCK);	//d8h
;;;507    	// Spi_WriteByte((uint8_t)(_ulBlockAddr>>16));	//写入24位地址
;;;508    	// Spi_WriteByte((uint8_t)(_ulBlockAddr>>8));
;;;509    	// Spi_WriteByte((uint8_t)(_ulBlockAddr));
;;;510    	FLASH_CS_HIGH;
000042  2104              MOVS     r1,#4
000044  4802              LDR      r0,|L1.80|
000046  f7fffffe          BL       GPIO_SetBits
;;;511    
;;;512    	Flash_WaitNobusy();	//等待写入结束
00004a  f7fffffe          BL       Flash_WaitNobusy
;;;513    }
00004e  bd38              POP      {r3-r5,pc}
;;;514    
                          ENDP

                  |L1.80|
                          DCD      0x40010800

                          AREA ||i.Flash_EraseChip||, CODE, READONLY, ALIGN=2

                  Flash_EraseChip PROC
;;;523    //--------------------------------------------------------------------------------------------------------
;;;524    void Flash_EraseChip(void)
000000  b508              PUSH     {r3,lr}
;;;525    {
;;;526    	uint8_t command = FLASH_ERASE_CHIP;
000002  20c7              MOVS     r0,#0xc7
000004  9000              STR      r0,[sp,#0]
;;;527    
;;;528    	Flash_WriteEnable();	//flash芯片写使能
000006  f7fffffe          BL       Flash_WriteEnable
;;;529    	Flash_WaitNobusy();	//等待写操作完成
00000a  f7fffffe          BL       Flash_WaitNobusy
;;;530    	
;;;531    	FLASH_CS_LOW;
00000e  2104              MOVS     r1,#4
000010  4807              LDR      r0,|L2.48|
000012  f7fffffe          BL       GPIO_ResetBits
;;;532    	hal_spi_recv_bytes(SPI_COMM_MODE, &command, 1);
000016  2201              MOVS     r2,#1
000018  4669              MOV      r1,sp
00001a  4610              MOV      r0,r2
00001c  f7fffffe          BL       hal_spi_recv_bytes
;;;533    	// Spi_WriteByte(FLASH_ERASE_CHIP);	//c7h
;;;534    	FLASH_CS_HIGH;
000020  2104              MOVS     r1,#4
000022  4803              LDR      r0,|L2.48|
000024  f7fffffe          BL       GPIO_SetBits
;;;535    	
;;;536    	Flash_WaitNobusy();	//等待写入结束
000028  f7fffffe          BL       Flash_WaitNobusy
;;;537    }
00002c  bd08              POP      {r3,pc}
;;;538    
                          ENDP

00002e  0000              DCW      0x0000
                  |L2.48|
                          DCD      0x40010800

                          AREA ||i.Flash_ErasePage||, CODE, READONLY, ALIGN=2

                  Flash_ErasePage PROC
;;;426    //--------------------------------------------------------------------------------------------------------
;;;427    void Flash_ErasePage(uint32_t _ulPageAddr)
000000  b510              PUSH     {r4,lr}
;;;428    {
000002  4604              MOV      r4,r0
;;;429    	_ulPageAddr *= 256;
000004  0224              LSLS     r4,r4,#8
;;;430    	
;;;431    	Flash_WriteEnable();
000006  f7fffffe          BL       Flash_WriteEnable
;;;432    	Flash_WaitNobusy();
00000a  f7fffffe          BL       Flash_WaitNobusy
;;;433    	
;;;434    	FLASH_CS_LOW;
00000e  2104              MOVS     r1,#4
000010  480b              LDR      r0,|L3.64|
000012  f7fffffe          BL       GPIO_ResetBits
;;;435    	Spi_WriteByte(FLASH_ERASE_PAGE);	//页擦除指令
000016  2081              MOVS     r0,#0x81
000018  f7fffffe          BL       Spi_WriteByte
;;;436    	Spi_WriteByte((uint8_t)(_ulPageAddr>>16));	//写入24位地址
00001c  f3c44007          UBFX     r0,r4,#16,#8
000020  f7fffffe          BL       Spi_WriteByte
;;;437    	Spi_WriteByte((uint8_t)(_ulPageAddr>>8));
000024  f3c42007          UBFX     r0,r4,#8,#8
000028  f7fffffe          BL       Spi_WriteByte
;;;438    	Spi_WriteByte((uint8_t)(_ulPageAddr>>0));
00002c  b2e0              UXTB     r0,r4
00002e  f7fffffe          BL       Spi_WriteByte
;;;439    	FLASH_CS_HIGH;
000032  2104              MOVS     r1,#4
000034  4802              LDR      r0,|L3.64|
000036  f7fffffe          BL       GPIO_SetBits
;;;440    	
;;;441    	Flash_WaitNobusy();	//等待写入结束
00003a  f7fffffe          BL       Flash_WaitNobusy
;;;442    }
00003e  bd10              POP      {r4,pc}
;;;443    
                          ENDP

                  |L3.64|
                          DCD      0x40010800

                          AREA ||i.Flash_EraseSector||, CODE, READONLY, ALIGN=2

                  Flash_EraseSector PROC
;;;452    //--------------------------------------------------------------------------------------------------------
;;;453    void Flash_EraseSector(uint32_t _ulSectorAddr)
000000  b51c              PUSH     {r2-r4,lr}
;;;454    {
000002  4604              MOV      r4,r0
;;;455    	uint8_t command = FLASH_ERASE_SECTOR;
000004  2020              MOVS     r0,#0x20
000006  9001              STR      r0,[sp,#4]
;;;456    	uint8_t temp_buff[3] = {0};
000008  2000              MOVS     r0,#0
00000a  9000              STR      r0,[sp,#0]
;;;457    	
;;;458    	temp_buff[0] = (uint8_t)(_ulSectorAddr >> 16);
00000c  0c20              LSRS     r0,r4,#16
00000e  f88d0000          STRB     r0,[sp,#0]
;;;459    	temp_buff[1] = (uint8_t)(_ulSectorAddr >> 8);
000012  0a20              LSRS     r0,r4,#8
000014  f88d0001          STRB     r0,[sp,#1]
;;;460    	temp_buff[2] = (uint8_t)(_ulSectorAddr >> 0);
000018  b2e0              UXTB     r0,r4
00001a  f88d0002          STRB     r0,[sp,#2]
;;;461    	
;;;462    	_ulSectorAddr *= 4096;	//1个扇区 4 KBytes
00001e  0324              LSLS     r4,r4,#12
;;;463    	
;;;464    	Flash_WriteEnable();
000020  f7fffffe          BL       Flash_WriteEnable
;;;465    	Flash_WaitNobusy();
000024  f7fffffe          BL       Flash_WaitNobusy
;;;466    	
;;;467    	FLASH_CS_LOW;
000028  2104              MOVS     r1,#4
00002a  4810              LDR      r0,|L4.108|
00002c  f7fffffe          BL       GPIO_ResetBits
;;;468    	hal_spi_send_bytes(SPI_COMM_MODE, &command, 1);
000030  2201              MOVS     r2,#1
000032  a901              ADD      r1,sp,#4
000034  4610              MOV      r0,r2
000036  f7fffffe          BL       hal_spi_send_bytes
;;;469    	hal_spi_send_bytes(SPI_COMM_MODE, &temp_buff[0], 1);
00003a  2201              MOVS     r2,#1
00003c  4669              MOV      r1,sp
00003e  4610              MOV      r0,r2
000040  f7fffffe          BL       hal_spi_send_bytes
;;;470    	hal_spi_send_bytes(SPI_COMM_MODE, &temp_buff[1], 1);
000044  2201              MOVS     r2,#1
000046  f10d0101          ADD      r1,sp,#1
00004a  4610              MOV      r0,r2
00004c  f7fffffe          BL       hal_spi_send_bytes
;;;471    	hal_spi_send_bytes(SPI_COMM_MODE, &temp_buff[2], 1);
000050  2201              MOVS     r2,#1
000052  f10d0102          ADD      r1,sp,#2
000056  4610              MOV      r0,r2
000058  f7fffffe          BL       hal_spi_send_bytes
;;;472    
;;;473    
;;;474    //	Spi_WriteByte(FLASH_ERASE_SECTOR);	//20h
;;;475    //	Spi_WriteByte((uint8_t)(_ulSectorAddr>>16));	//写入24位地址
;;;476    //	Spi_WriteByte((uint8_t)(_ulSectorAddr>>8));
;;;477    //	Spi_WriteByte((uint8_t)(_ulSectorAddr));
;;;478    	FLASH_CS_HIGH;
00005c  2104              MOVS     r1,#4
00005e  4803              LDR      r0,|L4.108|
000060  f7fffffe          BL       GPIO_SetBits
;;;479    	
;;;480    	Flash_WaitNobusy();	//等待写入结束
000064  f7fffffe          BL       Flash_WaitNobusy
;;;481    }
000068  bd1c              POP      {r2-r4,pc}
;;;482    
                          ENDP

00006a  0000              DCW      0x0000
                  |L4.108|
                          DCD      0x40010800

                          AREA ||i.Flash_FastReadByte||, CODE, READONLY, ALIGN=2

                  Flash_FastReadByte PROC
;;;220    //--------------------------------------------------------------------------------------------------------
;;;221    void Flash_FastReadByte(uint8_t *ucpBuffer, uint32_t _ulReadAddr, uint16_t _usNByte)
000000  b57c              PUSH     {r2-r6,lr}
;;;222    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
000006  4616              MOV      r6,r2
;;;223    	uint8_t command = FLASH_FASTREAD_DATA;
000008  200b              MOVS     r0,#0xb
00000a  9001              STR      r0,[sp,#4]
;;;224    	uint8_t temp_buff[3] = {0};
00000c  2000              MOVS     r0,#0
00000e  9000              STR      r0,[sp,#0]
;;;225    
;;;226    	temp_buff[0] = (uint8_t)(_ulReadAddr >> 16);
000010  0c20              LSRS     r0,r4,#16
000012  f88d0000          STRB     r0,[sp,#0]
;;;227    	temp_buff[1] = (uint8_t)(_ulReadAddr >> 8);
000016  0a20              LSRS     r0,r4,#8
000018  f88d0001          STRB     r0,[sp,#1]
;;;228    	temp_buff[2] = (uint8_t)(_ulReadAddr >> 0);
00001c  b2e0              UXTB     r0,r4
00001e  f88d0002          STRB     r0,[sp,#2]
;;;229    
;;;230    	FLASH_CS_LOW;
000022  2104              MOVS     r1,#4
000024  4811              LDR      r0,|L5.108|
000026  f7fffffe          BL       GPIO_ResetBits
;;;231    	
;;;232    	hal_spi_send_bytes(SPI_COMM_MODE, &command, 1);
00002a  2201              MOVS     r2,#1
00002c  a901              ADD      r1,sp,#4
00002e  4610              MOV      r0,r2
000030  f7fffffe          BL       hal_spi_send_bytes
;;;233    	hal_spi_send_bytes(SPI_COMM_MODE, &temp_buff[0], 1);
000034  2201              MOVS     r2,#1
000036  4669              MOV      r1,sp
000038  4610              MOV      r0,r2
00003a  f7fffffe          BL       hal_spi_send_bytes
;;;234    	hal_spi_send_bytes(SPI_COMM_MODE, &temp_buff[1], 1);
00003e  2201              MOVS     r2,#1
000040  f10d0101          ADD      r1,sp,#1
000044  4610              MOV      r0,r2
000046  f7fffffe          BL       hal_spi_send_bytes
;;;235    	hal_spi_send_bytes(SPI_COMM_MODE, &temp_buff[2], 1);
00004a  2201              MOVS     r2,#1
00004c  f10d0102          ADD      r1,sp,#2
000050  4610              MOV      r0,r2
000052  f7fffffe          BL       hal_spi_send_bytes
;;;236    
;;;237    	hal_spi_recv_bytes(SPI_COMM_MODE, ucpBuffer, _usNByte);
000056  4632              MOV      r2,r6
000058  4629              MOV      r1,r5
00005a  2001              MOVS     r0,#1
00005c  f7fffffe          BL       hal_spi_recv_bytes
;;;238    	
;;;239    	// Spi_WriteByte(FLASH_FASTREAD_DATA);//快速读取数据 0bh
;;;240    	// Spi_WriteByte((uint8_t)(_ulReadAddr>>16));//写入24位地址
;;;241    	// Spi_WriteByte((uint8_t)(_ulReadAddr>>8));
;;;242    	// Spi_WriteByte((uint8_t)(_ulReadAddr>>0));
;;;243    	// Spi_WriteByte(0xFF);//等待8个时钟(dummy byte)
;;;244    	// while(_usNByte--)
;;;245    	// {
;;;246    	// 	*ucpBuffer = Spi_ReadByte();
;;;247    	// 	ucpBuffer++;
;;;248    	// }
;;;249    	
;;;250    	FLASH_CS_HIGH;
000060  2104              MOVS     r1,#4
000062  4802              LDR      r0,|L5.108|
000064  f7fffffe          BL       GPIO_SetBits
;;;251    }
000068  bd7c              POP      {r2-r6,pc}
;;;252    
                          ENDP

00006a  0000              DCW      0x0000
                  |L5.108|
                          DCD      0x40010800

                          AREA ||i.Flash_PowerDown||, CODE, READONLY, ALIGN=2

                  Flash_PowerDown PROC
;;;547    //--------------------------------------------------------------------------------------------------------
;;;548    void Flash_PowerDown(void)
000000  b508              PUSH     {r3,lr}
;;;549    {
;;;550    	uint8_t command = FLASH_POWER_DOWN; 
000002  20b9              MOVS     r0,#0xb9
000004  9000              STR      r0,[sp,#0]
;;;551    
;;;552    	FLASH_CS_LOW;
000006  2104              MOVS     r1,#4
000008  4807              LDR      r0,|L6.40|
00000a  f7fffffe          BL       GPIO_ResetBits
;;;553    	hal_spi_send_bytes(SPI_COMM_MODE, &command, 1);
00000e  2201              MOVS     r2,#1
000010  4669              MOV      r1,sp
000012  4610              MOV      r0,r2
000014  f7fffffe          BL       hal_spi_send_bytes
;;;554    	// Spi_WriteByte(FLASH_POWER_DOWN);	//b9h
;;;555    	FLASH_CS_HIGH;
000018  2104              MOVS     r1,#4
00001a  4803              LDR      r0,|L6.40|
00001c  f7fffffe          BL       GPIO_SetBits
;;;556    	Sys_delay_us(3);	// cs go high , need to delay 3us
000020  2003              MOVS     r0,#3
000022  f7fffffe          BL       Sys_delay_us
;;;557    }
000026  bd08              POP      {r3,pc}
;;;558    
                          ENDP

                  |L6.40|
                          DCD      0x40010800

                          AREA ||i.Flash_ReadDeviceID||, CODE, READONLY, ALIGN=2

                  Flash_ReadDeviceID PROC
;;;587    //--------------------------------------------------------------------------------------------------------
;;;588    uint16_t Flash_ReadDeviceID(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;589    {
;;;590    	uint8_t command = FLASH_READ_DEVICE_ID;
000002  2090              MOVS     r0,#0x90
000004  9001              STR      r0,[sp,#4]
;;;591    	uint16_t usFlashId = 0;
000006  2400              MOVS     r4,#0
;;;592    	uint8_t temp_buff[3] = {0};
000008  2000              MOVS     r0,#0
00000a  9000              STR      r0,[sp,#0]
;;;593    	
;;;594    	FLASH_CS_LOW;
00000c  2104              MOVS     r1,#4
00000e  480f              LDR      r0,|L7.76|
000010  f7fffffe          BL       GPIO_ResetBits
;;;595    	
;;;596    	hal_spi_send_bytes(SPI_COMM_MODE, &command, 1);	//90h
000014  2201              MOVS     r2,#1
000016  a901              ADD      r1,sp,#4
000018  4610              MOV      r0,r2
00001a  f7fffffe          BL       hal_spi_send_bytes
;;;597    	hal_spi_send_bytes(SPI_COMM_MODE, temp_buff, 3);	//写入24位地址；假地址
00001e  2203              MOVS     r2,#3
000020  4669              MOV      r1,sp
000022  2001              MOVS     r0,#1
000024  f7fffffe          BL       hal_spi_send_bytes
;;;598    	hal_spi_recv_bytes(SPI_COMM_MODE, temp_buff, 2);
000028  2202              MOVS     r2,#2
00002a  4669              MOV      r1,sp
00002c  2001              MOVS     r0,#1
00002e  f7fffffe          BL       hal_spi_recv_bytes
;;;599    
;;;600    	// Spi_WriteByte(FLASH_READ_DEVICE_ID);	//90h
;;;601    	// Spi_WriteByte(0x00);//写入24位地址；假地址
;;;602    	// Spi_WriteByte(0x00);
;;;603    	// Spi_WriteByte(0x00);	//如果0x01,先输出 Device ID
;;;604    	// usFlashId |= Spi_ReadByte()<<8;
;;;605    	// usFlashId |= Spi_ReadByte();
;;;606    	
;;;607    	FLASH_CS_HIGH;
000032  2104              MOVS     r1,#4
000034  4805              LDR      r0,|L7.76|
000036  f7fffffe          BL       GPIO_SetBits
;;;608    	
;;;609    	usFlashId = (uint16_t)(temp_buff[0] << 8) | (temp_buff[1] << 0);
00003a  f89d0001          LDRB     r0,[sp,#1]
00003e  f89d1000          LDRB     r1,[sp,#0]
000042  ea402401          ORR      r4,r0,r1,LSL #8
;;;610    
;;;611    	return usFlashId;
000046  4620              MOV      r0,r4
;;;612    }
000048  bd1c              POP      {r2-r4,pc}
;;;613     
                          ENDP

00004a  0000              DCW      0x0000
                  |L7.76|
                          DCD      0x40010800

                          AREA ||i.Flash_ReadJEDECID||, CODE, READONLY, ALIGN=2

                  Flash_ReadJEDECID PROC
;;;622    //--------------------------------------------------------------------------------------------------------
;;;623    uint32_t Flash_ReadJEDECID(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;624    {
;;;625    	uint8_t command = FLASH_READ_JEDEC_ID;
000002  209f              MOVS     r0,#0x9f
000004  9001              STR      r0,[sp,#4]
;;;626    	uint32_t flash_jed_id = 0;
000006  2400              MOVS     r4,#0
;;;627    	uint8_t recv_buff[3] = {0};
000008  2000              MOVS     r0,#0
00000a  9000              STR      r0,[sp,#0]
;;;628    	
;;;629    	FLASH_CS_LOW;
00000c  2104              MOVS     r1,#4
00000e  480f              LDR      r0,|L8.76|
000010  f7fffffe          BL       GPIO_ResetBits
;;;630    
;;;631    	hal_spi_send_bytes(SPI_COMM_MODE, &command, 1);	//9fh
000014  2201              MOVS     r2,#1
000016  a901              ADD      r1,sp,#4
000018  4610              MOV      r0,r2
00001a  f7fffffe          BL       hal_spi_send_bytes
;;;632    	hal_spi_recv_bytes(SPI_COMM_MODE, recv_buff, 3);
00001e  2203              MOVS     r2,#3
000020  4669              MOV      r1,sp
000022  2001              MOVS     r0,#1
000024  f7fffffe          BL       hal_spi_recv_bytes
;;;633    	
;;;634    	FLASH_CS_HIGH;
000028  2104              MOVS     r1,#4
00002a  4808              LDR      r0,|L8.76|
00002c  f7fffffe          BL       GPIO_SetBits
;;;635    
;;;636    	flash_jed_id = (recv_buff[0] << 16) | (recv_buff[1] << 8) | (recv_buff[2] << 0);
000030  f89d0000          LDRB     r0,[sp,#0]
000034  0400              LSLS     r0,r0,#16
000036  f89d1001          LDRB     r1,[sp,#1]
00003a  ea402001          ORR      r0,r0,r1,LSL #8
00003e  f89d1002          LDRB     r1,[sp,#2]
000042  ea400401          ORR      r4,r0,r1
;;;637    	
;;;638    	return flash_jed_id;
000046  4620              MOV      r0,r4
;;;639    }
000048  bd1c              POP      {r2-r4,pc}
;;;640    
                          ENDP

00004a  0000              DCW      0x0000
                  |L8.76|
                          DCD      0x40010800

                          AREA ||i.Flash_ReadSR||, CODE, READONLY, ALIGN=2

                  Flash_ReadSR PROC
;;;112    //--------------------------------------------------------------------------------------------------------
;;;113    uint8_t Flash_ReadSR(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;114    {
;;;115    	uint8_t ucTmpVal = 0;
000002  2000              MOVS     r0,#0
000004  9001              STR      r0,[sp,#4]
;;;116    	uint8_t command = FLASH_READ_SR_CMD;
000006  2005              MOVS     r0,#5
000008  9000              STR      r0,[sp,#0]
;;;117    
;;;118    	FLASH_CS_LOW;
00000a  2104              MOVS     r1,#4
00000c  4809              LDR      r0,|L9.52|
00000e  f7fffffe          BL       GPIO_ResetBits
;;;119    	
;;;120    	hal_spi_send_bytes(SPI_COMM_MODE, &command, 1);	//05h
000012  2201              MOVS     r2,#1
000014  4669              MOV      r1,sp
000016  4610              MOV      r0,r2
000018  f7fffffe          BL       hal_spi_send_bytes
;;;121    	hal_spi_recv_bytes(SPI_COMM_MODE, &ucTmpVal, 1);
00001c  2201              MOVS     r2,#1
00001e  a901              ADD      r1,sp,#4
000020  4610              MOV      r0,r2
000022  f7fffffe          BL       hal_spi_recv_bytes
;;;122    
;;;123    	// ucTmpVal = Spi_ReadByte();
;;;124    	
;;;125    	FLASH_CS_HIGH;
000026  2104              MOVS     r1,#4
000028  4802              LDR      r0,|L9.52|
00002a  f7fffffe          BL       GPIO_SetBits
;;;126    	
;;;127    	return ucTmpVal;
00002e  f89d0004          LDRB     r0,[sp,#4]
;;;128    }
000032  bd1c              POP      {r2-r4,pc}
;;;129    
                          ENDP

                  |L9.52|
                          DCD      0x40010800

                          AREA ||i.Flash_ReadSomeBytes||, CODE, READONLY, ALIGN=2

                  Flash_ReadSomeBytes PROC
;;;177    //--------------------------------------------------------------------------------------------------------
;;;178    void Flash_ReadSomeBytes(uint8_t *ucpBuffer, uint32_t _ulReadAddr, uint16_t _usNByte)
000000  b57c              PUSH     {r2-r6,lr}
;;;179    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
000006  4616              MOV      r6,r2
;;;180    	uint8_t command = FLASH_READ_DATA;
000008  2003              MOVS     r0,#3
00000a  9001              STR      r0,[sp,#4]
;;;181    	uint8_t temp_buff[3] = {0};
00000c  2000              MOVS     r0,#0
00000e  9000              STR      r0,[sp,#0]
;;;182    
;;;183    	temp_buff[0] = (uint8_t)(_ulReadAddr >> 16);
000010  0c20              LSRS     r0,r4,#16
000012  f88d0000          STRB     r0,[sp,#0]
;;;184    	temp_buff[1] = (uint8_t)(_ulReadAddr >> 8);
000016  0a20              LSRS     r0,r4,#8
000018  f88d0001          STRB     r0,[sp,#1]
;;;185    	temp_buff[2] = (uint8_t)(_ulReadAddr >> 0);
00001c  b2e0              UXTB     r0,r4
00001e  f88d0002          STRB     r0,[sp,#2]
;;;186    
;;;187    	FLASH_CS_LOW;
000022  2104              MOVS     r1,#4
000024  4811              LDR      r0,|L10.108|
000026  f7fffffe          BL       GPIO_ResetBits
;;;188    	
;;;189    	hal_spi_send_bytes(SPI_COMM_MODE, &command, 1);
00002a  2201              MOVS     r2,#1
00002c  a901              ADD      r1,sp,#4
00002e  4610              MOV      r0,r2
000030  f7fffffe          BL       hal_spi_send_bytes
;;;190    	hal_spi_send_bytes(SPI_COMM_MODE, &temp_buff[0], 1);
000034  2201              MOVS     r2,#1
000036  4669              MOV      r1,sp
000038  4610              MOV      r0,r2
00003a  f7fffffe          BL       hal_spi_send_bytes
;;;191    	hal_spi_send_bytes(SPI_COMM_MODE, &temp_buff[1], 1);
00003e  2201              MOVS     r2,#1
000040  f10d0101          ADD      r1,sp,#1
000044  4610              MOV      r0,r2
000046  f7fffffe          BL       hal_spi_send_bytes
;;;192    	hal_spi_send_bytes(SPI_COMM_MODE, &temp_buff[2], 1);
00004a  2201              MOVS     r2,#1
00004c  f10d0102          ADD      r1,sp,#2
000050  4610              MOV      r0,r2
000052  f7fffffe          BL       hal_spi_send_bytes
;;;193    
;;;194    	hal_spi_recv_bytes(SPI_COMM_MODE, ucpBuffer, _usNByte);
000056  4632              MOV      r2,r6
000058  4629              MOV      r1,r5
00005a  2001              MOVS     r0,#1
00005c  f7fffffe          BL       hal_spi_recv_bytes
;;;195    
;;;196    	// Spi_WriteByte(FLASH_READ_DATA);	//连续读取数据 03h
;;;197    	// Spi_WriteByte((uint8_t)(_ulReadAddr>>16));	//写入24位地址
;;;198    	// Spi_WriteByte((uint8_t)(_ulReadAddr>>8));
;;;199    	// Spi_WriteByte((uint8_t)(_ulReadAddr>>0));
;;;200    
;;;201    	// while(_usNByte--)
;;;202    	// {
;;;203    	// 	*ucpBuffer = Spi_ReadByte();
;;;204    	// 	ucpBuffer++;
;;;205    	// }
;;;206    	
;;;207    	FLASH_CS_HIGH;
000060  2104              MOVS     r1,#4
000062  4802              LDR      r0,|L10.108|
000064  f7fffffe          BL       GPIO_SetBits
;;;208    }
000068  bd7c              POP      {r2-r6,pc}
;;;209    
                          ENDP

00006a  0000              DCW      0x0000
                  |L10.108|
                          DCD      0x40010800

                          AREA ||i.Flash_WaitNobusy||, CODE, READONLY, ALIGN=1

                  Flash_WaitNobusy PROC
;;;160    //--------------------------------------------------------------------------------------------------------
;;;161    void Flash_WaitNobusy(void)
000000  b510              PUSH     {r4,lr}
;;;162    {
;;;163    	//FLASH_READ_SR_CMD 指令的发送,有的FLASH仅需发送一次,FLASH自动回复,有的FLASH无法自动回复,需要循环一直发送等待
;;;164    	while(((Flash_ReadSR()) & 0x01)==0x01);	//等待BUSY位清空
000002  bf00              NOP      
                  |L11.4|
000004  f7fffffe          BL       Flash_ReadSR
000008  f0000001          AND      r0,r0,#1
00000c  2800              CMP      r0,#0
00000e  d1f9              BNE      |L11.4|
;;;165    }
000010  bd10              POP      {r4,pc}
;;;166    
                          ENDP


                          AREA ||i.Flash_WakeUp||, CODE, READONLY, ALIGN=2

                  Flash_WakeUp PROC
;;;567    //--------------------------------------------------------------------------------------------------------
;;;568    void Flash_WakeUp(void)
000000  b508              PUSH     {r3,lr}
;;;569    {
;;;570    	uint8_t command = FLASH_RELEASE_POWER_DOWN; 
000002  20ab              MOVS     r0,#0xab
000004  9000              STR      r0,[sp,#0]
;;;571    
;;;572    	FLASH_CS_LOW;
000006  2104              MOVS     r1,#4
000008  4807              LDR      r0,|L12.40|
00000a  f7fffffe          BL       GPIO_ResetBits
;;;573    	hal_spi_send_bytes(SPI_COMM_MODE, &command, 1);
00000e  2201              MOVS     r2,#1
000010  4669              MOV      r1,sp
000012  4610              MOV      r0,r2
000014  f7fffffe          BL       hal_spi_send_bytes
;;;574    	// Spi_WriteByte(FLASH_RELEASE_POWER_DOWN);//abh
;;;575    	FLASH_CS_HIGH;
000018  2104              MOVS     r1,#4
00001a  4803              LDR      r0,|L12.40|
00001c  f7fffffe          BL       GPIO_SetBits
;;;576    	Sys_delay_us(3);	//CS go high , need delay 3us
000020  2003              MOVS     r0,#3
000022  f7fffffe          BL       Sys_delay_us
;;;577    }
000026  bd08              POP      {r3,pc}
;;;578    
                          ENDP

                  |L12.40|
                          DCD      0x40010800

                          AREA ||i.Flash_WriteDisable||, CODE, READONLY, ALIGN=2

                  Flash_WriteDisable PROC
;;;94     //--------------------------------------------------------------------------------------------------------
;;;95     void Flash_WriteDisable(void)
000000  b508              PUSH     {r3,lr}
;;;96     {
;;;97     	uint8_t command = FLASH_WRITE_DISABLE_CMD;
000002  2004              MOVS     r0,#4
000004  9000              STR      r0,[sp,#0]
;;;98     	FLASH_CS_LOW;
000006  2104              MOVS     r1,#4
000008  4806              LDR      r0,|L13.36|
00000a  f7fffffe          BL       GPIO_ResetBits
;;;99     	hal_spi_send_bytes(SPI_COMM_MODE, &command, 1);
00000e  2201              MOVS     r2,#1
000010  4669              MOV      r1,sp
000012  4610              MOV      r0,r2
000014  f7fffffe          BL       hal_spi_send_bytes
;;;100    	// Spi_WriteByte(FLASH_WRITE_DISABLE_CMD);	//开启写失能 04h
;;;101    	FLASH_CS_HIGH;
000018  2104              MOVS     r1,#4
00001a  4802              LDR      r0,|L13.36|
00001c  f7fffffe          BL       GPIO_SetBits
;;;102    }
000020  bd08              POP      {r3,pc}
;;;103    
                          ENDP

000022  0000              DCW      0x0000
                  |L13.36|
                          DCD      0x40010800

                          AREA ||i.Flash_WriteEnable||, CODE, READONLY, ALIGN=2

                  Flash_WriteEnable PROC
;;;76     //--------------------------------------------------------------------------------------------------------
;;;77     void Flash_WriteEnable(void)
000000  b508              PUSH     {r3,lr}
;;;78     {
;;;79     	uint8_t command = FLASH_WRITE_ENABLE_CMD;
000002  2006              MOVS     r0,#6
000004  9000              STR      r0,[sp,#0]
;;;80     
;;;81     	FLASH_CS_LOW;
000006  2104              MOVS     r1,#4
000008  4806              LDR      r0,|L14.36|
00000a  f7fffffe          BL       GPIO_ResetBits
;;;82     	hal_spi_send_bytes(SPI_COMM_MODE, &command, 1);//开启写使能
00000e  2201              MOVS     r2,#1
000010  4669              MOV      r1,sp
000012  4610              MOV      r0,r2
000014  f7fffffe          BL       hal_spi_send_bytes
;;;83     	FLASH_CS_HIGH;
000018  2104              MOVS     r1,#4
00001a  4802              LDR      r0,|L14.36|
00001c  f7fffffe          BL       GPIO_SetBits
;;;84     }
000020  bd08              POP      {r3,pc}
;;;85     
                          ENDP

000022  0000              DCW      0x0000
                  |L14.36|
                          DCD      0x40010800

                          AREA ||i.Flash_WriteNoCheck||, CODE, READONLY, ALIGN=1

                  Flash_WriteNoCheck PROC
;;;310    //--------------------------------------------------------------------------------------------------------
;;;311    void Flash_WriteNoCheck(uint8_t *ucpBuffer, uint32_t _ulWriteAddr, uint16_t _usNByte)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;312    {
000004  4607              MOV      r7,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;313    	uint16_t PageByte = 256 - _ulWriteAddr % 256;//单页剩余可写字节数
00000a  b2f0              UXTB     r0,r6
00000c  f5c07580          RSB      r5,r0,#0x100
;;;314    
;;;315    	if(_usNByte <= PageByte)	//不大于256字节
000010  42ac              CMP      r4,r5
000012  dc00              BGT      |L15.22|
;;;316    	{
;;;317    		PageByte = _usNByte;
000014  4625              MOV      r5,r4
                  |L15.22|
;;;318    	}
;;;319    	
;;;320    	while(1)
000016  e012              B        |L15.62|
                  |L15.24|
;;;321    	{
;;;322    		Flash_WritePage(ucpBuffer, _ulWriteAddr, PageByte);
000018  462a              MOV      r2,r5
00001a  4631              MOV      r1,r6
00001c  4638              MOV      r0,r7
00001e  f7fffffe          BL       Flash_WritePage
;;;323    		if(_usNByte == PageByte)	//写入结束
000022  42ac              CMP      r4,r5
000024  d100              BNE      |L15.40|
;;;324    			break;
000026  e00b              B        |L15.64|
                  |L15.40|
;;;325    		else
;;;326    		{
;;;327    			ucpBuffer += PageByte;	//下一页写入的数据
000028  442f              ADD      r7,r7,r5
;;;328    			_ulWriteAddr += PageByte;	//下一页写入的地址
00002a  442e              ADD      r6,r6,r5
;;;329    			_usNByte -= PageByte;	//待写入的字节数递减
00002c  1b60              SUBS     r0,r4,r5
00002e  b284              UXTH     r4,r0
;;;330    			if(_usNByte > 256)
000030  f5b47f80          CMP      r4,#0x100
000034  dd02              BLE      |L15.60|
;;;331    			{
;;;332    				PageByte = 256;
000036  f44f7580          MOV      r5,#0x100
00003a  e000              B        |L15.62|
                  |L15.60|
;;;333    			}
;;;334    			else
;;;335    			{
;;;336    				PageByte = _usNByte;
00003c  4625              MOV      r5,r4
                  |L15.62|
00003e  e7eb              B        |L15.24|
                  |L15.64|
000040  bf00              NOP                            ;324
;;;337    			}
;;;338    		}
;;;339    	}
;;;340    }
000042  e8bd81f0          POP      {r4-r8,pc}
;;;341    
                          ENDP


                          AREA ||i.Flash_WritePage||, CODE, READONLY, ALIGN=2

                  Flash_WritePage PROC
;;;263    //--------------------------------------------------------------------------------------------------------
;;;264    void Flash_WritePage(uint8_t *ucpBuffer, uint32_t _ulWriteAddr, uint16_t _usNByte)
000000  b57c              PUSH     {r2-r6,lr}
;;;265    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
000006  4616              MOV      r6,r2
;;;266    	uint8_t command = FLASH_WRITE_PAGE;
000008  2002              MOVS     r0,#2
00000a  9001              STR      r0,[sp,#4]
;;;267    	uint8_t temp_buff[3] = {0};
00000c  2000              MOVS     r0,#0
00000e  9000              STR      r0,[sp,#0]
;;;268    
;;;269    	temp_buff[0] = (uint8_t)(_ulWriteAddr >> 16);
000010  0c20              LSRS     r0,r4,#16
000012  f88d0000          STRB     r0,[sp,#0]
;;;270    	temp_buff[1] = (uint8_t)(_ulWriteAddr >> 8);
000016  0a20              LSRS     r0,r4,#8
000018  f88d0001          STRB     r0,[sp,#1]
;;;271    	temp_buff[2] = (uint8_t)(_ulWriteAddr >> 0);
00001c  b2e0              UXTB     r0,r4
00001e  f88d0002          STRB     r0,[sp,#2]
;;;272    	
;;;273    	Flash_WriteEnable();	//写使能
000022  f7fffffe          BL       Flash_WriteEnable
;;;274    	Flash_WaitNobusy();	//等待写入结束
000026  f7fffffe          BL       Flash_WaitNobusy
;;;275    	
;;;276    	FLASH_CS_LOW;
00002a  2104              MOVS     r1,#4
00002c  4812              LDR      r0,|L16.120|
00002e  f7fffffe          BL       GPIO_ResetBits
;;;277    	
;;;278    	hal_spi_send_bytes(SPI_COMM_MODE, &command, 1);
000032  2201              MOVS     r2,#1
000034  a901              ADD      r1,sp,#4
000036  4610              MOV      r0,r2
000038  f7fffffe          BL       hal_spi_send_bytes
;;;279    	hal_spi_send_bytes(SPI_COMM_MODE, &temp_buff[0], 1);
00003c  2201              MOVS     r2,#1
00003e  4669              MOV      r1,sp
000040  4610              MOV      r0,r2
000042  f7fffffe          BL       hal_spi_send_bytes
;;;280    	hal_spi_send_bytes(SPI_COMM_MODE, &temp_buff[1], 1);
000046  2201              MOVS     r2,#1
000048  f10d0101          ADD      r1,sp,#1
00004c  4610              MOV      r0,r2
00004e  f7fffffe          BL       hal_spi_send_bytes
;;;281    	hal_spi_send_bytes(SPI_COMM_MODE, &temp_buff[2], 1);
000052  2201              MOVS     r2,#1
000054  f10d0102          ADD      r1,sp,#2
000058  4610              MOV      r0,r2
00005a  f7fffffe          BL       hal_spi_send_bytes
;;;282    
;;;283    	hal_spi_send_bytes(SPI_COMM_MODE, ucpBuffer, _usNByte);
00005e  4632              MOV      r2,r6
000060  4629              MOV      r1,r5
000062  2001              MOVS     r0,#1
000064  f7fffffe          BL       hal_spi_send_bytes
;;;284    
;;;285    	// Spi_WriteByte(FLASH_WRITE_PAGE);	//02h
;;;286    	// Spi_WriteByte((uint8_t)(_ulWriteAddr>>16));	//写入24位地址
;;;287    	// Spi_WriteByte((uint8_t)(_ulWriteAddr>>8));
;;;288    	// Spi_WriteByte((uint8_t)(_ulWriteAddr>>0));
;;;289    	// while(_usNByte--)
;;;290    	// {
;;;291    	// 	Spi_WriteByte(*ucpBuffer);	//SPI 写入单个字节
;;;292    	// 	ucpBuffer++;
;;;293    	// }
;;;294    	
;;;295    	FLASH_CS_HIGH;
000068  2104              MOVS     r1,#4
00006a  4803              LDR      r0,|L16.120|
00006c  f7fffffe          BL       GPIO_SetBits
;;;296    	
;;;297    	Flash_WaitNobusy();	//等待写入结束
000070  f7fffffe          BL       Flash_WaitNobusy
;;;298    }
000074  bd7c              POP      {r2-r6,pc}
;;;299    
                          ENDP

000076  0000              DCW      0x0000
                  |L16.120|
                          DCD      0x40010800

                          AREA ||i.Flash_WriteSR||, CODE, READONLY, ALIGN=2

                  Flash_WriteSR PROC
;;;138    //--------------------------------------------------------------------------------------------------------
;;;139    void Flash_WriteSR(uint8_t _ucByte)
000000  b501              PUSH     {r0,lr}
;;;140    {
000002  b082              SUB      sp,sp,#8
;;;141    	uint8_t command = FLASH_WRITE_SR_CMD;
000004  2001              MOVS     r0,#1
000006  9001              STR      r0,[sp,#4]
;;;142    
;;;143    	Flash_WriteEnable();	
000008  f7fffffe          BL       Flash_WriteEnable
;;;144    	Flash_WaitNobusy();
00000c  f7fffffe          BL       Flash_WaitNobusy
;;;145    
;;;146    	FLASH_CS_LOW;
000010  2104              MOVS     r1,#4
000012  4809              LDR      r0,|L17.56|
000014  f7fffffe          BL       GPIO_ResetBits
;;;147    	hal_spi_send_bytes(SPI_COMM_MODE, &command, 1);	//01h
000018  2201              MOVS     r2,#1
00001a  a901              ADD      r1,sp,#4
00001c  4610              MOV      r0,r2
00001e  f7fffffe          BL       hal_spi_send_bytes
;;;148    	hal_spi_send_bytes(SPI_COMM_MODE, &_ucByte, 1);	//写入一个字节
000022  2201              MOVS     r2,#1
000024  a902              ADD      r1,sp,#8
000026  4610              MOV      r0,r2
000028  f7fffffe          BL       hal_spi_send_bytes
;;;149    	FLASH_CS_HIGH;
00002c  2104              MOVS     r1,#4
00002e  4802              LDR      r0,|L17.56|
000030  f7fffffe          BL       GPIO_SetBits
;;;150    }
000034  bd0e              POP      {r1-r3,pc}
;;;151    
                          ENDP

000036  0000              DCW      0x0000
                  |L17.56|
                          DCD      0x40010800

                          AREA ||i.Flash_WriteSomeBytes||, CODE, READONLY, ALIGN=2

                  Flash_WriteSomeBytes PROC
;;;352    //--------------------------------------------------------------------------------------------------------
;;;353    void Flash_WriteSomeBytes(uint8_t *ucpBuffer, uint32_t _ulWriteAddr, uint16_t _usNByte)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;354    {
000004  4681              MOV      r9,r0
000006  460f              MOV      r7,r1
000008  4616              MOV      r6,r2
;;;355    	uint32_t ulSecPos = 0;				//得到扇区位置
00000a  f04f0800          MOV      r8,#0
;;;356    	uint16_t usSecOff = 0;				//扇区偏移
00000e  46c2              MOV      r10,r8
;;;357    	uint16_t usSecRemain = 0;		//剩余扇区
000010  2400              MOVS     r4,#0
;;;358    	uint32_t i = 0;
000012  2500              MOVS     r5,#0
;;;359    
;;;360    	ulSecPos = _ulWriteAddr / 4096;//地址所在扇区(0--511)
000014  ea4f3817          LSR      r8,r7,#12
;;;361    	usSecOff = _ulWriteAddr % 4096;//扇区内地址偏移
000018  f3c70a0b          UBFX     r10,r7,#0,#12
;;;362    	usSecRemain = 4096 - usSecOff;//扇区除去偏移，还剩多少字节
00001c  f5ca5480          RSB      r4,r10,#0x1000
;;;363    
;;;364    	if(_usNByte <= usSecRemain)	//写入数据大小 < 剩余扇区空间大小
000020  42a6              CMP      r6,r4
000022  dc00              BGT      |L18.38|
;;;365    	{
;;;366    		usSecRemain = _usNByte;
000024  4634              MOV      r4,r6
                  |L18.38|
;;;367    	}
;;;368    
;;;369    	while(1)
000026  e044              B        |L18.178|
                  |L18.40|
;;;370    	{
;;;371    		Flash_ReadSomeBytes(SectorBuf, ulSecPos*4096, 4096);//读出整个扇区的内容
000028  ea4f3108          LSL      r1,r8,#12
00002c  f44f5280          MOV      r2,#0x1000
000030  4822              LDR      r0,|L18.188|
000032  f7fffffe          BL       Flash_ReadSomeBytes
;;;372    		for (i = 0; i < usSecRemain; i++)	//校验数据
000036  2500              MOVS     r5,#0
000038  e007              B        |L18.74|
                  |L18.58|
;;;373    		{
;;;374    			if (SectorBuf[usSecOff + i] != 0xFF)//储存数据不为0xFF，需要擦除
00003a  eb0a0005          ADD      r0,r10,r5
00003e  491f              LDR      r1,|L18.188|
000040  5c08              LDRB     r0,[r1,r0]
000042  28ff              CMP      r0,#0xff
000044  d000              BEQ      |L18.72|
;;;375    				break;
000046  e002              B        |L18.78|
                  |L18.72|
000048  1c6d              ADDS     r5,r5,#1              ;372
                  |L18.74|
00004a  42a5              CMP      r5,r4                 ;372
00004c  d3f5              BCC      |L18.58|
                  |L18.78|
00004e  bf00              NOP      
;;;376    		}
;;;377    		
;;;378    		if(i < usSecRemain)	//需要擦除
000050  42a5              CMP      r5,r4
000052  d215              BCS      |L18.128|
;;;379    		{
;;;380    			Flash_EraseSector(ulSecPos);	//擦除这个扇区
000054  4640              MOV      r0,r8
000056  f7fffffe          BL       Flash_EraseSector
;;;381    			for(i = 0; i < usSecRemain; i++)	//保存写入的数据
00005a  2500              MOVS     r5,#0
00005c  e006              B        |L18.108|
                  |L18.94|
;;;382    			{
;;;383    				SectorBuf[usSecOff + i] = ucpBuffer[i];
00005e  f8190005          LDRB     r0,[r9,r5]
000062  eb0a0105          ADD      r1,r10,r5
000066  4a15              LDR      r2,|L18.188|
000068  5450              STRB     r0,[r2,r1]
00006a  1c6d              ADDS     r5,r5,#1              ;381
                  |L18.108|
00006c  42a5              CMP      r5,r4                 ;381
00006e  d3f6              BCC      |L18.94|
;;;384    			}
;;;385    			Flash_WriteNoCheck(SectorBuf, ulSecPos*4096, 4096);	//写入整个扇区(扇区=老数据+新写入数据)
000070  ea4f3108          LSL      r1,r8,#12
000074  f44f5280          MOV      r2,#0x1000
000078  4810              LDR      r0,|L18.188|
00007a  f7fffffe          BL       Flash_WriteNoCheck
00007e  e004              B        |L18.138|
                  |L18.128|
;;;386    		}
;;;387    		else
;;;388    		{
;;;389    			Flash_WriteNoCheck(ucpBuffer, _ulWriteAddr, usSecRemain);//不需要擦除,直接写入扇区
000080  4622              MOV      r2,r4
000082  4639              MOV      r1,r7
000084  4648              MOV      r0,r9
000086  f7fffffe          BL       Flash_WriteNoCheck
                  |L18.138|
;;;390    		}
;;;391    		if(_usNByte == usSecRemain)	//写入结束
00008a  42a6              CMP      r6,r4
00008c  d102              BNE      |L18.148|
;;;392    		{
;;;393    			Flash_WriteDisable();
00008e  f7fffffe          BL       Flash_WriteDisable
;;;394    			break;
000092  e00f              B        |L18.180|
                  |L18.148|
;;;395    		}
;;;396    		else
;;;397    		{
;;;398    			ulSecPos++;		//扇区地址增加1
000094  f1080801          ADD      r8,r8,#1
;;;399    			usSecOff = 0;		//扇区偏移归零
000098  f04f0a00          MOV      r10,#0
;;;400    			ucpBuffer += usSecRemain;	//指针偏移
00009c  44a1              ADD      r9,r9,r4
;;;401    			_ulWriteAddr += usSecRemain;	//写地址偏移
00009e  4427              ADD      r7,r7,r4
;;;402    			_usNByte -= usSecRemain;	//待写入的字节递减
0000a0  1b30              SUBS     r0,r6,r4
0000a2  b286              UXTH     r6,r0
;;;403    
;;;404    			if(_usNByte > 4096)
0000a4  f5b65f80          CMP      r6,#0x1000
0000a8  dd02              BLE      |L18.176|
;;;405    			{
;;;406    				usSecRemain = 4096;	//待写入一扇区(4096字节大小)
0000aa  f44f5480          MOV      r4,#0x1000
0000ae  e000              B        |L18.178|
                  |L18.176|
;;;407    			}
;;;408    			else
;;;409    			{
;;;410    				usSecRemain = _usNByte;		//待写入少于一扇区的数据
0000b0  4634              MOV      r4,r6
                  |L18.178|
0000b2  e7b9              B        |L18.40|
                  |L18.180|
0000b4  bf00              NOP                            ;394
;;;411    			}
;;;412    		}
;;;413    		
;;;414    	}
;;;415    	
;;;416    }
0000b6  e8bd87f0          POP      {r4-r10,pc}
;;;417    
                          ENDP

0000ba  0000              DCW      0x0000
                  |L18.188|
                          DCD      g_DataTmpBuffer
