; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\drvrtc.o --asm_dir=.\ --list_dir=.\ --depend=.\drvrtc.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\App\inc -I..\Driver\inc -I..\Libraries\CMSIS\Core\inc -I..\Libraries\CMSIS\Device\inc -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\HalIterface\inc -I..\User\inc -I..\Driver\src -ID:\KEIL_ARM_PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -ID:\keil_arm\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=533 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\drvrtc.crf ..\Driver\src\drvrtc.c]
                          THUMB

                          AREA ||i.Is_Leap_Year||, CODE, READONLY, ALIGN=1

                  Is_Leap_Year PROC
;;;187    //输出:该年份是不是闰年.1,是.0,不是
;;;188    u8 Is_Leap_Year(u16 year)
000000  4601              MOV      r1,r0
;;;189    {			  
;;;190    	if(year%4==0) //必须能被4整除
000002  17ca              ASRS     r2,r1,#31
000004  eb017292          ADD      r2,r1,r2,LSR #30
000008  1092              ASRS     r2,r2,#2
00000a  eba10282          SUB      r2,r1,r2,LSL #2
00000e  b992              CBNZ     r2,|L1.54|
;;;191    	{ 
;;;192    		if(year%100==0) 
000010  2064              MOVS     r0,#0x64
000012  fb91f2f0          SDIV     r2,r1,r0
000016  fb001012          MLS      r0,r0,r2,r1
00001a  b950              CBNZ     r0,|L1.50|
;;;193    		{ 
;;;194    			if(year%400==0)return 1;//如果以00结尾,还要能被400整除 	   
00001c  f44f70c8          MOV      r0,#0x190
000020  fb91f2f0          SDIV     r2,r1,r0
000024  fb001012          MLS      r0,r0,r2,r1
000028  b908              CBNZ     r0,|L1.46|
00002a  2001              MOVS     r0,#1
                  |L1.44|
;;;195    			else return 0;   
;;;196    		}else return 1;   
;;;197    	}else return 0;	
;;;198    }	 			   
00002c  4770              BX       lr
                  |L1.46|
00002e  2000              MOVS     r0,#0                 ;195
000030  e7fc              B        |L1.44|
                  |L1.50|
000032  2001              MOVS     r0,#1                 ;196
000034  e7fa              B        |L1.44|
                  |L1.54|
000036  2000              MOVS     r0,#0                 ;197
000038  e7f8              B        |L1.44|
;;;199    
                          ENDP


                          AREA ||i.RTC_Alarm_Set||, CODE, READONLY, ALIGN=2

                  RTC_Alarm_Set PROC
;;;247    //返回值:0,成功;其他:错误代码.
;;;248    u8 RTC_Alarm_Set(u16 syear,u8 smon,u8 sday,u8 hour,u8 min,u8 sec)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;249    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
00000a  4699              MOV      r9,r3
00000c  e9ddab0a          LDRD     r10,r11,[sp,#0x28]
;;;250    	u16 t;
;;;251    	u32 seccount=0;
000010  2400              MOVS     r4,#0
;;;252    	if(syear<1970||syear>2099)return 1;	   
000012  f24070b2          MOV      r0,#0x7b2
000016  4286              CMP      r6,r0
000018  db03              BLT      |L2.34|
00001a  f6400033          MOV      r0,#0x833
00001e  4286              CMP      r6,r0
000020  dd02              BLE      |L2.40|
                  |L2.34|
000022  2001              MOVS     r0,#1
                  |L2.36|
;;;253    	for(t=1970;t<syear;t++)	//把所有年份的秒钟相加
;;;254    	{
;;;255    		if(Is_Leap_Year(t))seccount+=31622400;//闰年的秒钟数
;;;256    		else seccount+=31536000;			  //平年的秒钟数
;;;257    	}
;;;258    	smon-=1;
;;;259    	for(t=0;t<smon;t++)	   //把前面月份的秒钟数相加
;;;260    	{
;;;261    		seccount+=(u32)mon_table[t]*86400;//月份秒钟数相加
;;;262    		if(Is_Leap_Year(syear)&&t==1)seccount+=86400;//闰年2月份增加一天的秒钟数	   
;;;263    	}
;;;264    	seccount+=(u32)(sday-1)*86400;//把前面日期的秒钟数相加 
;;;265    	seccount+=(u32)hour*3600;//小时秒钟数
;;;266        seccount+=(u32)min*60;	 //分钟秒钟数
;;;267    	seccount+=sec;//最后的秒钟加上去 			    
;;;268    	//设置时钟
;;;269    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR | RCC_APB1Periph_BKP, ENABLE);	//使能PWR和BKP外设时钟   
;;;270    	PWR_BackupAccessCmd(ENABLE);	//使能后备寄存器访问  
;;;271    	//上面三步是必须的!
;;;272    	RTC_SetAlarm(seccount);
;;;273    	RTC_WaitForLastTask();	//等待最近一次对RTC寄存器的写操作完成  	
;;;274    	
;;;275    	return 0;	    
;;;276    }
000024  e8bd9ff0          POP      {r4-r12,pc}
                  |L2.40|
000028  f24075b2          MOV      r5,#0x7b2             ;253
00002c  e00a              B        |L2.68|
                  |L2.46|
00002e  4628              MOV      r0,r5                 ;255
000030  f7fffffe          BL       Is_Leap_Year
000034  b110              CBZ      r0,|L2.60|
000036  4820              LDR      r0,|L2.184|
000038  4404              ADD      r4,r4,r0              ;255
00003a  e001              B        |L2.64|
                  |L2.60|
00003c  481f              LDR      r0,|L2.188|
00003e  4404              ADD      r4,r4,r0              ;256
                  |L2.64|
000040  1c68              ADDS     r0,r5,#1              ;253
000042  b285              UXTH     r5,r0                 ;253
                  |L2.68|
000044  42b5              CMP      r5,r6                 ;253
000046  dbf2              BLT      |L2.46|
000048  1e78              SUBS     r0,r7,#1              ;258
00004a  b2c7              UXTB     r7,r0                 ;258
00004c  2500              MOVS     r5,#0                 ;259
00004e  e010              B        |L2.114|
                  |L2.80|
000050  481b              LDR      r0,|L2.192|
000052  5d40              LDRB     r0,[r0,r5]            ;261
000054  f24021a3          MOV      r1,#0x2a3             ;261
000058  4348              MULS     r0,r1,r0              ;261
00005a  eb0414c0          ADD      r4,r4,r0,LSL #7       ;261
00005e  4630              MOV      r0,r6                 ;262
000060  f7fffffe          BL       Is_Leap_Year
000064  b118              CBZ      r0,|L2.110|
000066  2d01              CMP      r5,#1                 ;262
000068  d101              BNE      |L2.110|
00006a  4816              LDR      r0,|L2.196|
00006c  4404              ADD      r4,r4,r0              ;262
                  |L2.110|
00006e  1c68              ADDS     r0,r5,#1              ;259
000070  b285              UXTH     r5,r0                 ;259
                  |L2.114|
000072  42bd              CMP      r5,r7                 ;259
000074  dbec              BLT      |L2.80|
000076  f1a80001          SUB      r0,r8,#1              ;264
00007a  f24021a3          MOV      r1,#0x2a3             ;264
00007e  4348              MULS     r0,r1,r0              ;264
000080  eb0414c0          ADD      r4,r4,r0,LSL #7       ;264
000084  ebc91049          RSB      r0,r9,r9,LSL #5       ;265
000088  ebc02009          RSB      r0,r0,r9,LSL #8       ;265
00008c  eb041400          ADD      r4,r4,r0,LSL #4       ;265
000090  ebca100a          RSB      r0,r10,r10,LSL #4     ;266
000094  eb040480          ADD      r4,r4,r0,LSL #2       ;266
000098  445c              ADD      r4,r4,r11             ;267
00009a  2101              MOVS     r1,#1                 ;269
00009c  f04f50c0          MOV      r0,#0x18000000        ;269
0000a0  f7fffffe          BL       RCC_APB1PeriphClockCmd
0000a4  2001              MOVS     r0,#1                 ;270
0000a6  f7fffffe          BL       PWR_BackupAccessCmd
0000aa  4620              MOV      r0,r4                 ;272
0000ac  f7fffffe          BL       RTC_SetAlarm
0000b0  f7fffffe          BL       RTC_WaitForLastTask
0000b4  2000              MOVS     r0,#0                 ;275
0000b6  e7b5              B        |L2.36|
;;;277    
                          ENDP

                  |L2.184|
                          DCD      0x01e28500
                  |L2.188|
                          DCD      0x01e13380
                  |L2.192|
                          DCD      mon_table
                  |L2.196|
                          DCD      0x00015180

                          AREA ||i.RTC_Get||, CODE, READONLY, ALIGN=2

                  RTC_Get PROC
;;;279    //返回值:0,成功;其他:错误代码.
;;;280    u8 RTC_Get(void)
000000  b570              PUSH     {r4-r6,lr}
;;;281    {
;;;282    	static u16 daycnt=0;
;;;283    	u32 timecount=0; 
000002  2600              MOVS     r6,#0
;;;284    	u32 temp=0;
000004  2400              MOVS     r4,#0
;;;285    	u16 temp1=0;	  
000006  2500              MOVS     r5,#0
;;;286        timecount=RTC_GetCounter();	 
000008  f7fffffe          BL       RTC_GetCounter
00000c  4606              MOV      r6,r0
;;;287     	temp=timecount/86400;   //得到天数(秒钟数对应的)
00000e  4838              LDR      r0,|L3.240|
000010  fbb6f4f0          UDIV     r4,r6,r0
;;;288    	if(daycnt!=temp)//超过一天了
000014  4837              LDR      r0,|L3.244|
000016  8800              LDRH     r0,[r0,#0]  ; daycnt
000018  42a0              CMP      r0,r4
00001a  d03c              BEQ      |L3.150|
;;;289    	{	  
;;;290    		daycnt=temp;
00001c  4935              LDR      r1,|L3.244|
00001e  800c              STRH     r4,[r1,#0]
;;;291    		temp1=1970;	//从1970年开始
000020  f24075b2          MOV      r5,#0x7b2
;;;292    		while(temp>=365)
000024  e010              B        |L3.72|
                  |L3.38|
;;;293    		{				 
;;;294    			if(Is_Leap_Year(temp1))//是闰年
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       Is_Leap_Year
00002c  b140              CBZ      r0,|L3.64|
;;;295    			{
;;;296    				if(temp>=366)temp-=366;//闰年的秒钟数
00002e  f5b47fb7          CMP      r4,#0x16e
000032  d302              BCC      |L3.58|
000034  f5a474b7          SUB      r4,r4,#0x16e
000038  e004              B        |L3.68|
                  |L3.58|
;;;297    				else {temp1++;break;}  
00003a  1c68              ADDS     r0,r5,#1
00003c  b285              UXTH     r5,r0
00003e  e006              B        |L3.78|
                  |L3.64|
;;;298    			}
;;;299    			else temp-=365;	  //平年 
000040  f2a4146d          SUB      r4,r4,#0x16d
                  |L3.68|
;;;300    			temp1++;  
000044  1c68              ADDS     r0,r5,#1
000046  b285              UXTH     r5,r0
                  |L3.72|
000048  f5b47fb6          CMP      r4,#0x16c             ;292
00004c  d8eb              BHI      |L3.38|
                  |L3.78|
00004e  bf00              NOP                            ;297
;;;301    		}   
;;;302    		calendar.w_year=temp1;//得到年份
000050  4829              LDR      r0,|L3.248|
000052  8085              STRH     r5,[r0,#4]
;;;303    		temp1=0;
000054  2500              MOVS     r5,#0
;;;304    		while(temp>=28)//超过了一个月
000056  e016              B        |L3.134|
                  |L3.88|
;;;305    		{
;;;306    			if(Is_Leap_Year(calendar.w_year)&&temp1==1)//当年是不是闰年/2月份
000058  4927              LDR      r1,|L3.248|
00005a  8888              LDRH     r0,[r1,#4]  ; calendar
00005c  f7fffffe          BL       Is_Leap_Year
000060  b130              CBZ      r0,|L3.112|
000062  2d01              CMP      r5,#1
000064  d104              BNE      |L3.112|
;;;307    			{
;;;308    				if(temp>=29)temp-=29;//闰年的秒钟数
000066  2c1d              CMP      r4,#0x1d
000068  d301              BCC      |L3.110|
00006a  3c1d              SUBS     r4,r4,#0x1d
00006c  e009              B        |L3.130|
                  |L3.110|
;;;309    				else break; 
00006e  e00c              B        |L3.138|
                  |L3.112|
;;;310    			}
;;;311    			else 
;;;312    			{
;;;313    				if(temp>=mon_table[temp1])temp-=mon_table[temp1];//平年
000070  4822              LDR      r0,|L3.252|
000072  5d40              LDRB     r0,[r0,r5]
000074  42a0              CMP      r0,r4
000076  d803              BHI      |L3.128|
000078  4820              LDR      r0,|L3.252|
00007a  5d40              LDRB     r0,[r0,r5]
00007c  1a24              SUBS     r4,r4,r0
00007e  e000              B        |L3.130|
                  |L3.128|
;;;314    				else break;
000080  e003              B        |L3.138|
                  |L3.130|
;;;315    			}
;;;316    			temp1++;  
000082  1c68              ADDS     r0,r5,#1
000084  b285              UXTH     r5,r0
                  |L3.134|
000086  2c1c              CMP      r4,#0x1c              ;304
000088  d2e6              BCS      |L3.88|
                  |L3.138|
00008a  bf00              NOP                            ;309
;;;317    		}
;;;318    		calendar.w_month=temp1+1;	//得到月份
00008c  1c68              ADDS     r0,r5,#1
00008e  491a              LDR      r1,|L3.248|
000090  7188              STRB     r0,[r1,#6]
;;;319    		calendar.w_date=temp+1;  	//得到日期 
000092  1c60              ADDS     r0,r4,#1
000094  71c8              STRB     r0,[r1,#7]
                  |L3.150|
;;;320    	}
;;;321    	temp=timecount%86400;     		//得到秒钟数   	   
000096  4816              LDR      r0,|L3.240|
000098  fbb6f1f0          UDIV     r1,r6,r0
00009c  fb006411          MLS      r4,r0,r1,r6
;;;322    	calendar.hour=temp/3600;     	//小时
0000a0  f44f6061          MOV      r0,#0xe10
0000a4  fbb4f0f0          UDIV     r0,r4,r0
0000a8  4913              LDR      r1,|L3.248|
0000aa  7008              STRB     r0,[r1,#0]
;;;323    	calendar.min=(temp%3600)/60; 	//分钟	
0000ac  f44f6061          MOV      r0,#0xe10
0000b0  fbb4f1f0          UDIV     r1,r4,r0
0000b4  fb004011          MLS      r0,r0,r1,r4
0000b8  213c              MOVS     r1,#0x3c
0000ba  fbb0f0f1          UDIV     r0,r0,r1
0000be  490e              LDR      r1,|L3.248|
0000c0  7048              STRB     r0,[r1,#1]
;;;324    	calendar.sec=(temp%3600)%60; 	//秒钟
0000c2  f44f6061          MOV      r0,#0xe10
0000c6  fbb4f1f0          UDIV     r1,r4,r0
0000ca  fb004011          MLS      r0,r0,r1,r4
0000ce  213c              MOVS     r1,#0x3c
0000d0  fbb0f2f1          UDIV     r2,r0,r1
0000d4  fb010012          MLS      r0,r1,r2,r0
0000d8  4907              LDR      r1,|L3.248|
0000da  7088              STRB     r0,[r1,#2]
;;;325    	calendar.week=RTC_Get_Week(calendar.w_year,calendar.w_month,calendar.w_date);//获取星期   
0000dc  460b              MOV      r3,r1
0000de  79da              LDRB     r2,[r3,#7]  ; calendar
0000e0  7999              LDRB     r1,[r3,#6]  ; calendar
0000e2  8898              LDRH     r0,[r3,#4]  ; calendar
0000e4  f7fffffe          BL       RTC_Get_Week
0000e8  4903              LDR      r1,|L3.248|
0000ea  7208              STRB     r0,[r1,#8]
;;;326    	return 0;
0000ec  2000              MOVS     r0,#0
;;;327    }	
0000ee  bd70              POP      {r4-r6,pc}
;;;328    
                          ENDP

                  |L3.240|
                          DCD      0x00015180
                  |L3.244|
                          DCD      daycnt
                  |L3.248|
                          DCD      calendar
                  |L3.252|
                          DCD      mon_table

                          AREA ||i.RTC_Get_Week||, CODE, READONLY, ALIGN=2

                  RTC_Get_Week PROC
;;;332    //返回值：星期号																						 
;;;333    u8 RTC_Get_Week(u16 year,u8 month,u8 day)
000000  b5f0              PUSH     {r4-r7,lr}
;;;334    {	
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;335    	u16 temp2;
;;;336    	u8 yearH,yearL;
;;;337    	
;;;338    	yearH=year/100;	yearL=year%100; 
000008  2064              MOVS     r0,#0x64
00000a  fb93f0f0          SDIV     r0,r3,r0
00000e  b2c6              UXTB     r6,r0
000010  2064              MOVS     r0,#0x64
000012  fb93f7f0          SDIV     r7,r3,r0
000016  fb003017          MLS      r0,r0,r7,r3
00001a  b2c1              UXTB     r1,r0
;;;339    	// 如果为21世纪,年份数加100  
;;;340    	if (yearH>19)yearL+=100;
00001c  2e13              CMP      r6,#0x13
00001e  dd02              BLE      |L4.38|
000020  f1010064          ADD      r0,r1,#0x64
000024  b2c1              UXTB     r1,r0
                  |L4.38|
;;;341    	// 所过闰年数只算1900年之后的  
;;;342    	temp2=yearL+yearL/4;
000026  4608              MOV      r0,r1
000028  17cf              ASRS     r7,r1,#31
00002a  eb017797          ADD      r7,r1,r7,LSR #30
00002e  eb0107a7          ADD      r7,r1,r7,ASR #2
000032  b2ba              UXTH     r2,r7
;;;343    	temp2=temp2%7; 
000034  2007              MOVS     r0,#7
000036  fb92f7f0          SDIV     r7,r2,r0
00003a  fb002017          MLS      r0,r0,r7,r2
00003e  b282              UXTH     r2,r0
;;;344    	temp2=temp2+day+table_week[month-1];
000040  1957              ADDS     r7,r2,r5
000042  1e60              SUBS     r0,r4,#1
000044  f8dfc02c          LDR      r12,|L4.116|
000048  f81c0000          LDRB     r0,[r12,r0]
00004c  4438              ADD      r0,r0,r7
00004e  b282              UXTH     r2,r0
;;;345    	if (yearL%4==0&&month<3)temp2--;
000050  17cf              ASRS     r7,r1,#31
000052  eb017797          ADD      r7,r1,r7,LSR #30
000056  10bf              ASRS     r7,r7,#2
000058  eba10787          SUB      r7,r1,r7,LSL #2
00005c  b91f              CBNZ     r7,|L4.102|
00005e  2c03              CMP      r4,#3
000060  da01              BGE      |L4.102|
000062  1e50              SUBS     r0,r2,#1
000064  b282              UXTH     r2,r0
                  |L4.102|
;;;346    	return(temp2%7);
000066  2007              MOVS     r0,#7
000068  fb92f7f0          SDIV     r7,r2,r0
00006c  fb002017          MLS      r0,r0,r7,r2
000070  b2c0              UXTB     r0,r0
;;;347    }			  
000072  bdf0              POP      {r4-r7,pc}
;;;348    
                          ENDP

                  |L4.116|
                          DCD      table_week

                          AREA ||i.RTC_IRQHandler||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  RTC_IRQHandler PROC
;;;156    //每秒触发一次  
;;;157    void RTC_IRQHandler(void)
000000  b50e              PUSH     {r1-r3,lr}
;;;158    {		 
;;;159    	if (RTC_GetITStatus(RTC_IT_SEC) != RESET)//秒钟中断
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       RTC_GetITStatus
000008  b1e0              CBZ      r0,|L5.68|
;;;160    	{							
;;;161    		RTC_Get();//更新时间
00000a  f7fffffe          BL       RTC_Get
;;;162    		g_time_flag= 1;
00000e  2001              MOVS     r0,#1
000010  491c              LDR      r1,|L5.132|
000012  7008              STRB     r0,[r1,#0]
;;;163    		hour_x=calendar.hour;
000014  481c              LDR      r0,|L5.136|
000016  7800              LDRB     r0,[r0,#0]  ; calendar
000018  491c              LDR      r1,|L5.140|
00001a  7008              STRB     r0,[r1,#0]
;;;164    		min_x=calendar.min;
00001c  481a              LDR      r0,|L5.136|
00001e  7840              LDRB     r0,[r0,#1]  ; calendar
000020  491b              LDR      r1,|L5.144|
000022  7008              STRB     r0,[r1,#0]
;;;165    		sec_x=calendar.sec;	
000024  4818              LDR      r0,|L5.136|
000026  7880              LDRB     r0,[r0,#2]  ; calendar
000028  491a              LDR      r1,|L5.148|
00002a  7008              STRB     r0,[r1,#0]
;;;166    		w_year_x=calendar.w_year;;
00002c  4816              LDR      r0,|L5.136|
00002e  8880              LDRH     r0,[r0,#4]  ; calendar
000030  4919              LDR      r1,|L5.152|
000032  8008              STRH     r0,[r1,#0]
;;;167    		w_month_x=calendar.w_month;
000034  4814              LDR      r0,|L5.136|
000036  7980              LDRB     r0,[r0,#6]  ; calendar
000038  4918              LDR      r1,|L5.156|
00003a  7008              STRB     r0,[r1,#0]
;;;168    		w_date_x=calendar.w_date;	
00003c  4812              LDR      r0,|L5.136|
00003e  79c0              LDRB     r0,[r0,#7]  ; calendar
000040  4917              LDR      r1,|L5.160|
000042  7008              STRB     r0,[r1,#0]
                  |L5.68|
;;;169    //		printf("RTC Time:20%d-%d-%d %d:%d:%d\r\n",calendar.w_year,calendar.w_month,calendar.w_date,calendar.hour,calendar.min,calendar.sec);//输出闹铃时间	
;;;170    				
;;;171     	}
;;;172    	if(RTC_GetITStatus(RTC_IT_ALR)!= RESET)//闹钟中断
000044  2002              MOVS     r0,#2
000046  f7fffffe          BL       RTC_GetITStatus
00004a  b1a0              CBZ      r0,|L5.118|
;;;173    	{
;;;174    		RTC_ClearITPendingBit(RTC_IT_ALR);		//清闹钟中断	  	
00004c  2002              MOVS     r0,#2
00004e  f7fffffe          BL       RTC_ClearITPendingBit
;;;175    		RTC_Get();				//更新时间   
000052  f7fffffe          BL       RTC_Get
;;;176    		printf("Alarm Time:%d-%d-%d %d:%d:%d\r\n",calendar.w_year,calendar.w_month,calendar.w_date,calendar.hour,calendar.min,calendar.sec);//输出闹铃时间	
000056  480c              LDR      r0,|L5.136|
000058  7880              LDRB     r0,[r0,#2]  ; calendar
00005a  490b              LDR      r1,|L5.136|
00005c  7849              LDRB     r1,[r1,#1]  ; calendar
00005e  4a0a              LDR      r2,|L5.136|
000060  7812              LDRB     r2,[r2,#0]  ; calendar
000062  e9cd2100          STRD     r2,r1,[sp,#0]
000066  9002              STR      r0,[sp,#8]
000068  4807              LDR      r0,|L5.136|
00006a  79c3              LDRB     r3,[r0,#7]  ; calendar
00006c  7982              LDRB     r2,[r0,#6]  ; calendar
00006e  8881              LDRH     r1,[r0,#4]  ; calendar
000070  a00c              ADR      r0,|L5.164|
000072  f7fffffe          BL       __2printf
                  |L5.118|
;;;177    		
;;;178      	} 				  								 
;;;179    	RTC_ClearITPendingBit(RTC_IT_SEC|RTC_IT_OW);		//清闹钟中断
000076  2005              MOVS     r0,#5
000078  f7fffffe          BL       RTC_ClearITPendingBit
;;;180    	RTC_WaitForLastTask();	  	    						 	   	 
00007c  f7fffffe          BL       RTC_WaitForLastTask
;;;181    }
000080  bd0e              POP      {r1-r3,pc}
;;;182    //判断是否是闰年函数
                          ENDP

000082  0000              DCW      0x0000
                  |L5.132|
                          DCD      g_time_flag
                  |L5.136|
                          DCD      calendar
                  |L5.140|
                          DCD      hour_x
                  |L5.144|
                          DCD      min_x
                  |L5.148|
                          DCD      sec_x
                  |L5.152|
                          DCD      w_year_x
                  |L5.156|
                          DCD      w_month_x
                  |L5.160|
                          DCD      w_date_x
                  |L5.164|
0000a4  416c6172          DCB      "Alarm Time:%d-%d-%d %d:%d:%d\r\n",0
0000a8  6d205469
0000ac  6d653a25
0000b0  642d2564
0000b4  2d256420
0000b8  25643a25
0000bc  643a2564
0000c0  0d0a00  
0000c3  00                DCB      0

                          AREA ||i.RTC_Init_LSE||, CODE, READONLY, ALIGN=2

                  RTC_Init_LSE PROC
;;;109    
;;;110    u8 RTC_Init_LSE(void)
000000  b57c              PUSH     {r2-r6,lr}
;;;111    {
;;;112    	//检查是不是第一次配置时钟
;;;113    	u8 temp=0;
000002  2400              MOVS     r4,#0
;;;114    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR | RCC_APB1Periph_BKP, ENABLE); //使能PWR和BKP外设时钟
000004  2101              MOVS     r1,#1
000006  f04f50c0          MOV      r0,#0x18000000
00000a  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;115    	PWR_BackupAccessCmd(ENABLE); //使能后备寄存器访问
00000e  2001              MOVS     r0,#1
000010  f7fffffe          BL       PWR_BackupAccessCmd
;;;116    		
;;;117    	if (BKP_ReadBackupRegister(BKP_DR1) != 0x5080) //从指定的后备寄存器中读出数据:读出了与写入的指定数据不相乎
000014  2004              MOVS     r0,#4
000016  f7fffffe          BL       BKP_ReadBackupRegister
00001a  f5b04fa1          CMP      r0,#0x5080
00001e  d047              BEQ      |L6.176|
;;;118    	{
;;;119    		BKP_DeInit(); //复位备份区域
000020  f7fffffe          BL       BKP_DeInit
;;;120    		RCC_LSEConfig(RCC_LSE_ON);	//设置外部低速晶振(LSE),使用外设低速晶振
000024  2001              MOVS     r0,#1
000026  f7fffffe          BL       RCC_LSEConfig
;;;121    		while (RCC_GetFlagStatus(RCC_FLAG_LSERDY) == RESET&& temp < 250) //检查指定的RCC标志位设置与否,等待低速晶振就绪
00002a  e004              B        |L6.54|
                  |L6.44|
;;;122    		{
;;;123    			temp++;
00002c  1c60              ADDS     r0,r4,#1
00002e  b2c4              UXTB     r4,r0
;;;124    			delay_ms(10);
000030  200a              MOVS     r0,#0xa
000032  f7fffffe          BL       delay_ms
                  |L6.54|
000036  2041              MOVS     r0,#0x41              ;121
000038  f7fffffe          BL       RCC_GetFlagStatus
00003c  b908              CBNZ     r0,|L6.66|
00003e  2cfa              CMP      r4,#0xfa              ;121
000040  dbf4              BLT      |L6.44|
                  |L6.66|
;;;125    		}
;;;126    		if(temp>=250)return 1;//初始化时钟失败,晶振有问题
000042  2cfa              CMP      r4,#0xfa
000044  db01              BLT      |L6.74|
000046  2001              MOVS     r0,#1
                  |L6.72|
;;;127    		RCC_RTCCLKConfig(RCC_RTCCLKSource_LSE); //设置RTC时钟(RTCCLK),选择LSE作为RTC时钟
;;;128    		RCC_RTCCLKCmd(ENABLE); //使能RTC时钟
;;;129    		RTC_WaitForLastTask(); //等待最近一次对RTC寄存器的写操作完成
;;;130    		RTC_WaitForSynchro(); //等待RTC寄存器同步
;;;131    		RTC_ITConfig(RTC_IT_SEC|RTC_IT_ALR, ENABLE); //使能RTC秒中断、闹钟中断
;;;132    		RTC_WaitForLastTask(); //等待最近一次对RTC寄存器的写操作完成
;;;133    		RTC_EnterConfigMode();/// 允许配置
;;;134    		 RTC_SetPrescaler(32767); //设置RTC预分频的值
;;;135    		RTC_WaitForLastTask(); //等待最近一次对RTC寄存器的写操作完成
;;;136    
;;;137    		//RTC_Set(2017,3,6,0,0,0); //设置时间
;;;138    		get_time();  //获取编译时间
;;;139    		RTC_Set(calendar.w_year+2000-1 ,calendar.w_month,calendar.w_date,calendar.hour,calendar.min,calendar.sec);  //设置时间
;;;140    		
;;;141    		RTC_ExitConfigMode(); //退出配置模式
;;;142    		BKP_WriteBackupRegister(BKP_DR1, 0X5080); //向指定的后备寄存器中写入用户程序数据
;;;143    	}
;;;144    	else//系统继续计时
;;;145    	{
;;;146    		RTC_WaitForSynchro(); //等待最近一次对RTC寄存器的写操作完成
;;;147    		RTC_ITConfig(RTC_IT_SEC|RTC_IT_ALR, ENABLE); //使能RTC秒中断、闹钟中断
;;;148    		RTC_WaitForLastTask(); //等待最近一次对RTC寄存器的写操作完成
;;;149    	}
;;;150    	RTC_NVIC_Config();//RCT中断分组设置
;;;151    	RTC_Get();//更新时间
;;;152    	return 0; //ok
;;;153    }
000048  bd7c              POP      {r2-r6,pc}
                  |L6.74|
00004a  f44f7080          MOV      r0,#0x100             ;127
00004e  f7fffffe          BL       RCC_RTCCLKConfig
000052  2001              MOVS     r0,#1                 ;128
000054  f7fffffe          BL       RCC_RTCCLKCmd
000058  f7fffffe          BL       RTC_WaitForLastTask
00005c  f7fffffe          BL       RTC_WaitForSynchro
000060  2101              MOVS     r1,#1                 ;131
000062  2003              MOVS     r0,#3                 ;131
000064  f7fffffe          BL       RTC_ITConfig
000068  f7fffffe          BL       RTC_WaitForLastTask
00006c  f7fffffe          BL       RTC_EnterConfigMode
000070  f64770ff          MOV      r0,#0x7fff            ;134
000074  f7fffffe          BL       RTC_SetPrescaler
000078  f7fffffe          BL       RTC_WaitForLastTask
00007c  f7fffffe          BL       get_time
000080  4812              LDR      r0,|L6.204|
000082  7880              LDRB     r0,[r0,#2]            ;139  ; calendar
000084  4911              LDR      r1,|L6.204|
000086  7849              LDRB     r1,[r1,#1]            ;139  ; calendar
000088  4d10              LDR      r5,|L6.204|
00008a  e9cd1000          STRD     r1,r0,[sp,#0]         ;139
00008e  782b              LDRB     r3,[r5,#0]            ;139  ; calendar
000090  79ea              LDRB     r2,[r5,#7]            ;139  ; calendar
000092  79a9              LDRB     r1,[r5,#6]            ;139  ; calendar
000094  88ad              LDRH     r5,[r5,#4]            ;139  ; calendar
000096  f20575cf          ADD      r5,r5,#0x7cf          ;139
00009a  b2a8              UXTH     r0,r5                 ;139
00009c  f7fffffe          BL       RTC_Set
0000a0  f7fffffe          BL       RTC_ExitConfigMode
0000a4  f44f41a1          MOV      r1,#0x5080            ;142
0000a8  2004              MOVS     r0,#4                 ;142
0000aa  f7fffffe          BL       BKP_WriteBackupRegister
0000ae  e007              B        |L6.192|
                  |L6.176|
0000b0  f7fffffe          BL       RTC_WaitForSynchro
0000b4  2101              MOVS     r1,#1                 ;147
0000b6  2003              MOVS     r0,#3                 ;147
0000b8  f7fffffe          BL       RTC_ITConfig
0000bc  f7fffffe          BL       RTC_WaitForLastTask
                  |L6.192|
0000c0  f7fffffe          BL       RTC_NVIC_Config
0000c4  f7fffffe          BL       RTC_Get
0000c8  2000              MOVS     r0,#0                 ;152
0000ca  e7bd              B        |L6.72|
;;;154    
                          ENDP

                  |L6.204|
                          DCD      calendar

                          AREA ||i.RTC_Init_LSI||, CODE, READONLY, ALIGN=2

                  RTC_Init_LSI PROC
;;;54     *******************************************************************************/
;;;55     u8 RTC_Init_LSI(void)
000000  b57c              PUSH     {r2-r6,lr}
;;;56     {
;;;57     	//检查是不是第一次配置时钟
;;;58     	u8 temp=0;
000002  2400              MOVS     r4,#0
;;;59     	RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR | RCC_APB1Periph_BKP, ENABLE); //使能PWR和BKP外设时钟
000004  2101              MOVS     r1,#1
000006  f04f50c0          MOV      r0,#0x18000000
00000a  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;60     	PWR_BackupAccessCmd(ENABLE); //使能后备寄存器访问
00000e  2001              MOVS     r0,#1
000010  f7fffffe          BL       PWR_BackupAccessCmd
;;;61     	RCC_LSICmd(ENABLE); //设置内部低速晶振（LSI）
000014  2001              MOVS     r0,#1
000016  f7fffffe          BL       RCC_LSICmd
;;;62     	if (BKP_ReadBackupRegister(BKP_DR1) != 0x5050) //从指定的后备寄存器中读出数据:读出了与写入的指定数据不相乎
00001a  2004              MOVS     r0,#4
00001c  f7fffffe          BL       BKP_ReadBackupRegister
000020  f2450150          MOV      r1,#0x5050
000024  4288              CMP      r0,r1
000026  d044              BEQ      |L7.178|
;;;63     	{
;;;64     		BKP_DeInit(); //复位备份区域
000028  f7fffffe          BL       BKP_DeInit
;;;65     		while (RCC_GetFlagStatus(RCC_FLAG_LSIRDY) == RESET&& temp < 250) //检查指定的RCC标志位设置与否,等待低速晶振就绪
00002c  e004              B        |L7.56|
                  |L7.46|
;;;66     		{
;;;67     			temp++;
00002e  1c60              ADDS     r0,r4,#1
000030  b2c4              UXTB     r4,r0
;;;68     			delay_ms(10);
000032  200a              MOVS     r0,#0xa
000034  f7fffffe          BL       delay_ms
                  |L7.56|
000038  2061              MOVS     r0,#0x61              ;65
00003a  f7fffffe          BL       RCC_GetFlagStatus
00003e  b908              CBNZ     r0,|L7.68|
000040  2cfa              CMP      r4,#0xfa              ;65
000042  dbf4              BLT      |L7.46|
                  |L7.68|
;;;69     		}
;;;70     		if(temp>=250)return 1;//初始化时钟失败,晶振有问题
000044  2cfa              CMP      r4,#0xfa
000046  db01              BLT      |L7.76|
000048  2001              MOVS     r0,#1
                  |L7.74|
;;;71     		RCC_RTCCLKConfig(RCC_RTCCLKSource_LSI); //设置RTC时钟(RTCCLK),选择LSI作为RTC时钟
;;;72     		RCC_RTCCLKCmd(ENABLE); //使能RTC时钟
;;;73     		RTC_WaitForLastTask(); //等待最近一次对RTC寄存器的写操作完成
;;;74     		RTC_WaitForSynchro(); //等待RTC寄存器同步
;;;75     		RTC_ITConfig(RTC_IT_SEC|RTC_IT_ALR, ENABLE); //使能RTC秒中断、闹钟中断
;;;76     		RTC_WaitForLastTask(); //等待最近一次对RTC寄存器的写操作完成
;;;77     		RTC_EnterConfigMode();/// 允许配置
;;;78     		//RTC_SetPrescaler(32767); //设置RTC预分频的值
;;;79     		RTC_SetPrescaler(40000); //设置RTC预分频的值
;;;80     		RTC_WaitForLastTask(); //等待最近一次对RTC寄存器的写操作完成
;;;81     
;;;82     		//RTC_Set(2017,3,6,0,0,0); //设置时间
;;;83     		get_time();  //获取编译时间
;;;84     		RTC_Set(calendar.w_year+2000-1 ,calendar.w_month,calendar.w_date,calendar.hour,calendar.min,calendar.sec);  //设置时间
;;;85     		
;;;86     		RTC_ExitConfigMode(); //退出配置模式
;;;87     		BKP_WriteBackupRegister(BKP_DR1, 0X5050); //向指定的后备寄存器中写入用户程序数据
;;;88     	}
;;;89     	else//系统继续计时
;;;90     	{
;;;91     		RTC_WaitForSynchro(); //等待最近一次对RTC寄存器的写操作完成
;;;92     		RTC_ITConfig(RTC_IT_SEC|RTC_IT_ALR, ENABLE); //使能RTC秒中断、闹钟中断
;;;93     		RTC_WaitForLastTask(); //等待最近一次对RTC寄存器的写操作完成
;;;94     	}
;;;95     	RTC_NVIC_Config();//RCT中断分组设置
;;;96     	RTC_Get();//更新时间
;;;97     	return 0; //ok
;;;98     }
00004a  bd7c              POP      {r2-r6,pc}
                  |L7.76|
00004c  f44f7000          MOV      r0,#0x200             ;71
000050  f7fffffe          BL       RCC_RTCCLKConfig
000054  2001              MOVS     r0,#1                 ;72
000056  f7fffffe          BL       RCC_RTCCLKCmd
00005a  f7fffffe          BL       RTC_WaitForLastTask
00005e  f7fffffe          BL       RTC_WaitForSynchro
000062  2101              MOVS     r1,#1                 ;75
000064  2003              MOVS     r0,#3                 ;75
000066  f7fffffe          BL       RTC_ITConfig
00006a  f7fffffe          BL       RTC_WaitForLastTask
00006e  f7fffffe          BL       RTC_EnterConfigMode
000072  f6494040          MOV      r0,#0x9c40            ;79
000076  f7fffffe          BL       RTC_SetPrescaler
00007a  f7fffffe          BL       RTC_WaitForLastTask
00007e  f7fffffe          BL       get_time
000082  4813              LDR      r0,|L7.208|
000084  7880              LDRB     r0,[r0,#2]            ;84  ; calendar
000086  4912              LDR      r1,|L7.208|
000088  7849              LDRB     r1,[r1,#1]            ;84  ; calendar
00008a  4d11              LDR      r5,|L7.208|
00008c  e9cd1000          STRD     r1,r0,[sp,#0]         ;84
000090  782b              LDRB     r3,[r5,#0]            ;84  ; calendar
000092  79ea              LDRB     r2,[r5,#7]            ;84  ; calendar
000094  79a9              LDRB     r1,[r5,#6]            ;84  ; calendar
000096  88ad              LDRH     r5,[r5,#4]            ;84  ; calendar
000098  f20575cf          ADD      r5,r5,#0x7cf          ;84
00009c  b2a8              UXTH     r0,r5                 ;84
00009e  f7fffffe          BL       RTC_Set
0000a2  f7fffffe          BL       RTC_ExitConfigMode
0000a6  f2450150          MOV      r1,#0x5050            ;87
0000aa  2004              MOVS     r0,#4                 ;87
0000ac  f7fffffe          BL       BKP_WriteBackupRegister
0000b0  e007              B        |L7.194|
                  |L7.178|
0000b2  f7fffffe          BL       RTC_WaitForSynchro
0000b6  2101              MOVS     r1,#1                 ;92
0000b8  2003              MOVS     r0,#3                 ;92
0000ba  f7fffffe          BL       RTC_ITConfig
0000be  f7fffffe          BL       RTC_WaitForLastTask
                  |L7.194|
0000c2  f7fffffe          BL       RTC_NVIC_Config
0000c6  f7fffffe          BL       RTC_Get
0000ca  2000              MOVS     r0,#0                 ;97
0000cc  e7bd              B        |L7.74|
;;;99     
                          ENDP

0000ce  0000              DCW      0x0000
                  |L7.208|
                          DCD      calendar

                          AREA ||i.RTC_NVIC_Config||, CODE, READONLY, ALIGN=1

                  RTC_NVIC_Config PROC
;;;34     
;;;35     static void RTC_NVIC_Config(void)
000000  b508              PUSH     {r3,lr}
;;;36     {	
;;;37     	NVIC_InitTypeDef NVIC_InitStructure;
;;;38     	NVIC_InitStructure.NVIC_IRQChannel = RTC_IRQn;		//RTC全局中断
000002  2003              MOVS     r0,#3
000004  f88d0000          STRB     r0,[sp,#0]
;;;39     	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;	//先占优先级1位,从优先级3位
000008  2000              MOVS     r0,#0
00000a  f88d0001          STRB     r0,[sp,#1]
;;;40     	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;	//先占优先级0位,从优先级4位
00000e  f88d0002          STRB     r0,[sp,#2]
;;;41     	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;		//使能该通道中断
000012  2001              MOVS     r0,#1
000014  f88d0003          STRB     r0,[sp,#3]
;;;42     	NVIC_Init(&NVIC_InitStructure);		//根据NVIC_InitStruct中指定的参数初始化外设NVIC寄存器
000018  4668              MOV      r0,sp
00001a  f7fffffe          BL       NVIC_Init
;;;43     }
00001e  bd08              POP      {r3,pc}
;;;44     /*******************************************************************************
                          ENDP


                          AREA ||i.RTC_Set||, CODE, READONLY, ALIGN=2

                  RTC_Set PROC
;;;213    *******************************************************************************/
;;;214    u8 RTC_Set(u16 syear,u8 smon,u8 sday,u8 hour,u8 min,u8 sec)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;215    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
00000a  4699              MOV      r9,r3
00000c  e9ddab0a          LDRD     r10,r11,[sp,#0x28]
;;;216    	u16 t;
;;;217    	u32 seccount=0;
000010  2400              MOVS     r4,#0
;;;218    	if(syear<1970||syear>2099)return 1;	   
000012  f24070b2          MOV      r0,#0x7b2
000016  4286              CMP      r6,r0
000018  db03              BLT      |L9.34|
00001a  f6400033          MOV      r0,#0x833
00001e  4286              CMP      r6,r0
000020  dd02              BLE      |L9.40|
                  |L9.34|
000022  2001              MOVS     r0,#1
                  |L9.36|
;;;219    	for(t=1970;t<syear;t++)	//把所有年份的秒钟相加
;;;220    	{
;;;221    		if(Is_Leap_Year(t))seccount+=31622400;//闰年的秒钟数
;;;222    		else seccount+=31536000;			  //平年的秒钟数
;;;223    	}
;;;224    	smon-=1;
;;;225    	for(t=0;t<smon;t++)	   //把前面月份的秒钟数相加
;;;226    	{
;;;227    		seccount+=(u32)mon_table[t]*86400;//月份秒钟数相加
;;;228    		if(Is_Leap_Year(syear)&&t==1)seccount+=86400;//闰年2月份增加一天的秒钟数	   
;;;229    	}
;;;230    	seccount+=(u32)(sday-1)*86400;//把前面日期的秒钟数相加 
;;;231    	seccount+=(u32)hour*3600;//小时秒钟数
;;;232        seccount+=(u32)min*60;	 //分钟秒钟数
;;;233    	seccount+=sec;//最后的秒钟加上去
;;;234    
;;;235    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR | RCC_APB1Periph_BKP, ENABLE);	//使能PWR和BKP外设时钟  
;;;236    	PWR_BackupAccessCmd(ENABLE);	//使能RTC和后备寄存器访问 
;;;237    	RTC_SetCounter(seccount);	//设置RTC计数器的值
;;;238    
;;;239    	RTC_WaitForLastTask();	//等待最近一次对RTC寄存器的写操作完成  	
;;;240    	return 0;	    
;;;241    }
000024  e8bd9ff0          POP      {r4-r12,pc}
                  |L9.40|
000028  f24075b2          MOV      r5,#0x7b2             ;219
00002c  e00a              B        |L9.68|
                  |L9.46|
00002e  4628              MOV      r0,r5                 ;221
000030  f7fffffe          BL       Is_Leap_Year
000034  b110              CBZ      r0,|L9.60|
000036  4820              LDR      r0,|L9.184|
000038  4404              ADD      r4,r4,r0              ;221
00003a  e001              B        |L9.64|
                  |L9.60|
00003c  481f              LDR      r0,|L9.188|
00003e  4404              ADD      r4,r4,r0              ;222
                  |L9.64|
000040  1c68              ADDS     r0,r5,#1              ;219
000042  b285              UXTH     r5,r0                 ;219
                  |L9.68|
000044  42b5              CMP      r5,r6                 ;219
000046  dbf2              BLT      |L9.46|
000048  1e78              SUBS     r0,r7,#1              ;224
00004a  b2c7              UXTB     r7,r0                 ;224
00004c  2500              MOVS     r5,#0                 ;225
00004e  e010              B        |L9.114|
                  |L9.80|
000050  481b              LDR      r0,|L9.192|
000052  5d40              LDRB     r0,[r0,r5]            ;227
000054  f24021a3          MOV      r1,#0x2a3             ;227
000058  4348              MULS     r0,r1,r0              ;227
00005a  eb0414c0          ADD      r4,r4,r0,LSL #7       ;227
00005e  4630              MOV      r0,r6                 ;228
000060  f7fffffe          BL       Is_Leap_Year
000064  b118              CBZ      r0,|L9.110|
000066  2d01              CMP      r5,#1                 ;228
000068  d101              BNE      |L9.110|
00006a  4816              LDR      r0,|L9.196|
00006c  4404              ADD      r4,r4,r0              ;228
                  |L9.110|
00006e  1c68              ADDS     r0,r5,#1              ;225
000070  b285              UXTH     r5,r0                 ;225
                  |L9.114|
000072  42bd              CMP      r5,r7                 ;225
000074  dbec              BLT      |L9.80|
000076  f1a80001          SUB      r0,r8,#1              ;230
00007a  f24021a3          MOV      r1,#0x2a3             ;230
00007e  4348              MULS     r0,r1,r0              ;230
000080  eb0414c0          ADD      r4,r4,r0,LSL #7       ;230
000084  ebc91049          RSB      r0,r9,r9,LSL #5       ;231
000088  ebc02009          RSB      r0,r0,r9,LSL #8       ;231
00008c  eb041400          ADD      r4,r4,r0,LSL #4       ;231
000090  ebca100a          RSB      r0,r10,r10,LSL #4     ;232
000094  eb040480          ADD      r4,r4,r0,LSL #2       ;232
000098  445c              ADD      r4,r4,r11             ;233
00009a  2101              MOVS     r1,#1                 ;235
00009c  f04f50c0          MOV      r0,#0x18000000        ;235
0000a0  f7fffffe          BL       RCC_APB1PeriphClockCmd
0000a4  2001              MOVS     r0,#1                 ;236
0000a6  f7fffffe          BL       PWR_BackupAccessCmd
0000aa  4620              MOV      r0,r4                 ;237
0000ac  f7fffffe          BL       RTC_SetCounter
0000b0  f7fffffe          BL       RTC_WaitForLastTask
0000b4  2000              MOVS     r0,#0                 ;240
0000b6  e7b5              B        |L9.36|
;;;242    
                          ENDP

                  |L9.184|
                          DCD      0x01e28500
                  |L9.188|
                          DCD      0x01e13380
                  |L9.192|
                          DCD      mon_table
                  |L9.196|
                          DCD      0x00015180

                          AREA ||i.get_time||, CODE, READONLY, ALIGN=2

                  get_time PROC
;;;348    
;;;349    void get_time(void)
000000  b538              PUSH     {r3-r5,lr}
;;;350    {
;;;351    	u8 i;
;;;352    	u8 tmp_str[4] = "   ";
000002  a03b              ADR      r0,|L10.240|
000004  6800              LDR      r0,[r0,#0]
000006  9000              STR      r0,[sp,#0]
;;;353    	//Dec  3 2021
;;;354    	if( pd[4] == ' ' )
000008  483a              LDR      r0,|L10.244|
00000a  6800              LDR      r0,[r0,#0]  ; pd
00000c  7900              LDRB     r0,[r0,#4]
00000e  2820              CMP      r0,#0x20
000010  d106              BNE      |L10.32|
;;;355    	{
;;;356    		calendar.w_date = pd[5]-'0';//得到日
000012  4838              LDR      r0,|L10.244|
000014  6800              LDR      r0,[r0,#0]  ; pd
000016  7940              LDRB     r0,[r0,#5]
000018  3830              SUBS     r0,r0,#0x30
00001a  4937              LDR      r1,|L10.248|
00001c  71c8              STRB     r0,[r1,#7]
00001e  e00d              B        |L10.60|
                  |L10.32|
;;;357    	}
;;;358    	else   //Dec 30 2021
;;;359    	{
;;;360    		calendar.w_date= (pd[4]-'0')*10 + (pd[5]-'0');//得到日
000020  4834              LDR      r0,|L10.244|
000022  6800              LDR      r0,[r0,#0]  ; pd
000024  7940              LDRB     r0,[r0,#5]
000026  3830              SUBS     r0,r0,#0x30
000028  4932              LDR      r1,|L10.244|
00002a  6809              LDR      r1,[r1,#0]  ; pd
00002c  7909              LDRB     r1,[r1,#4]
00002e  3930              SUBS     r1,r1,#0x30
000030  eb010181          ADD      r1,r1,r1,LSL #2
000034  eb000041          ADD      r0,r0,r1,LSL #1
000038  492f              LDR      r1,|L10.248|
00003a  71c8              STRB     r0,[r1,#7]
                  |L10.60|
;;;361    	}
;;;362    	
;;;363    	calendar.w_year = (pd[9]-'0')*10 + (pd[10]-'0');//得到年	
00003c  482d              LDR      r0,|L10.244|
00003e  6800              LDR      r0,[r0,#0]  ; pd
000040  7a80              LDRB     r0,[r0,#0xa]
000042  3830              SUBS     r0,r0,#0x30
000044  492b              LDR      r1,|L10.244|
000046  6809              LDR      r1,[r1,#0]  ; pd
000048  7a49              LDRB     r1,[r1,#9]
00004a  3930              SUBS     r1,r1,#0x30
00004c  eb010181          ADD      r1,r1,r1,LSL #2
000050  eb000041          ADD      r0,r0,r1,LSL #1
000054  4928              LDR      r1,|L10.248|
000056  8088              STRH     r0,[r1,#4]
;;;364    	//printf("年:%d\r\n",calendar.w_year );
;;;365    	tmp_str[0] = pd[0];
000058  4826              LDR      r0,|L10.244|
00005a  6800              LDR      r0,[r0,#0]  ; pd
00005c  7800              LDRB     r0,[r0,#0]
00005e  f88d0000          STRB     r0,[sp,#0]
;;;366    	tmp_str[1] = pd[1];
000062  4824              LDR      r0,|L10.244|
000064  6800              LDR      r0,[r0,#0]  ; pd
000066  7840              LDRB     r0,[r0,#1]
000068  f88d0001          STRB     r0,[sp,#1]
;;;367    	tmp_str[2] = pd[2];
00006c  4821              LDR      r0,|L10.244|
00006e  6800              LDR      r0,[r0,#0]  ; pd
000070  7880              LDRB     r0,[r0,#2]
000072  f88d0002          STRB     r0,[sp,#2]
;;;368    	for(i = 1; i <= 12; i++)
000076  2401              MOVS     r4,#1
000078  e009              B        |L10.142|
                  |L10.122|
;;;369    	{
;;;370    		if(strcmp((const char *)tmp_str, (char *)g_month_buf[i]) == 0)
00007a  4820              LDR      r0,|L10.252|
00007c  f8501024          LDR      r1,[r0,r4,LSL #2]
000080  4668              MOV      r0,sp
000082  f7fffffe          BL       strcmp
000086  b900              CBNZ     r0,|L10.138|
;;;371    		{
;;;372    			break;	//找到月份了
000088  e003              B        |L10.146|
                  |L10.138|
00008a  1c60              ADDS     r0,r4,#1              ;368
00008c  b2c4              UXTB     r4,r0                 ;368
                  |L10.142|
00008e  2c0c              CMP      r4,#0xc               ;368
000090  ddf3              BLE      |L10.122|
                  |L10.146|
000092  bf00              NOP      
;;;373    		}
;;;374    //		printf("strcmp((const char *)pd:%c%c%c \r\n", pd[0],pd[1],pd[2]);
;;;375    //		printf("strcmp((const char *)pd:%s \r\n", tmp_str);
;;;376    	}
;;;377    	calendar.w_month = i;//得到月 
000094  4818              LDR      r0,|L10.248|
000096  7184              STRB     r4,[r0,#6]
;;;378    
;;;379    	calendar.hour = (pt[0]-'0')*10 + (pt[1]-'0');//得到小时
000098  4819              LDR      r0,|L10.256|
00009a  6800              LDR      r0,[r0,#0]  ; pt
00009c  7840              LDRB     r0,[r0,#1]
00009e  3830              SUBS     r0,r0,#0x30
0000a0  4917              LDR      r1,|L10.256|
0000a2  6809              LDR      r1,[r1,#0]  ; pt
0000a4  7809              LDRB     r1,[r1,#0]
0000a6  3930              SUBS     r1,r1,#0x30
0000a8  eb010181          ADD      r1,r1,r1,LSL #2
0000ac  eb000041          ADD      r0,r0,r1,LSL #1
0000b0  4911              LDR      r1,|L10.248|
0000b2  7008              STRB     r0,[r1,#0]
;;;380    	calendar.min = (pt[3]-'0')*10 + (pt[4]-'0');//得到分钟
0000b4  4812              LDR      r0,|L10.256|
0000b6  6800              LDR      r0,[r0,#0]  ; pt
0000b8  7900              LDRB     r0,[r0,#4]
0000ba  3830              SUBS     r0,r0,#0x30
0000bc  4910              LDR      r1,|L10.256|
0000be  6809              LDR      r1,[r1,#0]  ; pt
0000c0  78c9              LDRB     r1,[r1,#3]
0000c2  3930              SUBS     r1,r1,#0x30
0000c4  eb010181          ADD      r1,r1,r1,LSL #2
0000c8  eb000041          ADD      r0,r0,r1,LSL #1
0000cc  490a              LDR      r1,|L10.248|
0000ce  7048              STRB     r0,[r1,#1]
;;;381    	calendar.sec = (pt[6]-'0')*10 + (pt[7]-'0');//得到秒
0000d0  480b              LDR      r0,|L10.256|
0000d2  6800              LDR      r0,[r0,#0]  ; pt
0000d4  79c0              LDRB     r0,[r0,#7]
0000d6  3830              SUBS     r0,r0,#0x30
0000d8  4909              LDR      r1,|L10.256|
0000da  6809              LDR      r1,[r1,#0]  ; pt
0000dc  7989              LDRB     r1,[r1,#6]
0000de  3930              SUBS     r1,r1,#0x30
0000e0  eb010181          ADD      r1,r1,r1,LSL #2
0000e4  eb000041          ADD      r0,r0,r1,LSL #1
0000e8  4903              LDR      r1,|L10.248|
0000ea  7088              STRB     r0,[r1,#2]
;;;382    }
0000ec  bd38              POP      {r3-r5,pc}
                          ENDP

0000ee  0000              DCW      0x0000
                  |L10.240|
0000f0  20202000          DCB      "   ",0
                  |L10.244|
                          DCD      ||pd||
                  |L10.248|
                          DCD      calendar
                  |L10.252|
                          DCD      g_month_buf
                  |L10.256|
                          DCD      ||pt||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  calendar
                          %        10

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  table_week
000000  00030306          DCB      0x00,0x03,0x03,0x06
000004  01040602          DCB      0x01,0x04,0x06,0x02
000008  05000305          DCB      0x05,0x00,0x03,0x05
                  mon_table
00000c  1f1c1f1e          DCB      0x1f,0x1c,0x1f,0x1e
000010  1f1e1f1f          DCB      0x1f,0x1e,0x1f,0x1f
000014  1e1f1e1f          DCB      0x1e,0x1f,0x1e,0x1f

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  32323a34          DCB      "22:49:27",0
000004  393a3237
000008  00      
000009  00                DCB      0
00000a  00                DCB      0
00000b  00                DCB      0
00000c  4d617220          DCB      "Mar  9 2023",0
000010  20392032
000014  30323300
000018  4e554c00          DCB      "NUL",0
00001c  4a616e00          DCB      "Jan",0
000020  46656200          DCB      "Feb",0
000024  4d617200          DCB      "Mar",0
000028  41707200          DCB      "Apr",0
00002c  4d617900          DCB      "May",0
000030  4a756e00          DCB      "Jun",0
000034  4a756c00          DCB      "Jul",0
000038  41756700          DCB      "Aug",0
00003c  53657000          DCB      "Sep",0
000040  4f637400          DCB      "Oct",0
000044  4e6f7600          DCB      "Nov",0
000048  44656300          DCB      "Dec",0

                          AREA ||.data||, DATA, ALIGN=2

                  ||pt||
                          DCD      ||.conststring||
                  ||pd||
                          DCD      ||.conststring||+0xc
                  hour_x
000008  00                DCB      0x00
                  min_x
000009  00                DCB      0x00
                  sec_x
00000a  0000              DCB      0x00,0x00
                  w_year_x
00000c  0000              DCB      0x00,0x00
                  w_month_x
00000e  00                DCB      0x00
                  w_date_x
00000f  00                DCB      0x00
                  week_x
000010  00                DCB      0x00
                  g_time_flag
000011  000000            DCB      0x00,0x00,0x00
                  g_month_buf
                          DCD      ||.conststring||+0x18
                          DCD      ||.conststring||+0x1c
                          DCD      ||.conststring||+0x20
                          DCD      ||.conststring||+0x24
                          DCD      ||.conststring||+0x28
                          DCD      ||.conststring||+0x2c
                          DCD      ||.conststring||+0x30
                          DCD      ||.conststring||+0x34
                          DCD      ||.conststring||+0x38
                          DCD      ||.conststring||+0x3c
                          DCD      ||.conststring||+0x40
                          DCD      ||.conststring||+0x44
                          DCD      ||.conststring||+0x48
                  alarm
000048  00000000          DCB      0x00,0x00,0x00,0x00
                  daycnt
00004c  0000              DCW      0x0000
