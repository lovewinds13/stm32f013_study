; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\drvtimer.o --asm_dir=.\ --list_dir=.\ --depend=.\drvtimer.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\App\inc -I..\Driver\inc -I..\Libraries\CMSIS\Core\inc -I..\Libraries\CMSIS\Device\inc -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\HalIterface\inc -I..\User\inc -I..\Driver\src -ID:\KEIL_ARM_PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -ID:\keil_arm\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=533 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\drvtimer.crf ..\Driver\src\drvtimer.c]
                          THUMB

                          AREA ||i.timer_config||, CODE, READONLY, ALIGN=2

                  timer_config PROC
;;;20     //---------------------------------------------------------------------------------------------------------------------------------------------
;;;21     static void timer_config(uint8_t timer_no, uint16_t timer_arr, uint16_t timer_psc)
000000  b5fe              PUSH     {r1-r7,lr}
;;;22     {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;23     	TIM_TimeBaseInitTypeDef timer_init_config;
;;;24     	
;;;25     	if (timer_no == 3)
000008  2e03              CMP      r6,#3
00000a  d110              BNE      |L1.46|
;;;26     	{
;;;27     		RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
00000c  2101              MOVS     r1,#1
00000e  2002              MOVS     r0,#2
000010  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;28     		
;;;29     		timer_init_config.TIM_Period 				= timer_arr;	//自动重装载寄存器数值
000014  f8ad4004          STRH     r4,[sp,#4]
;;;30     		timer_init_config.TIM_Prescaler 			= timer_psc;	//时钟频率除数预分频数值
000018  f8ad5000          STRH     r5,[sp,#0]
;;;31     		timer_init_config.TIM_ClockDivision 		= TIM_CKD_DIV1;	//时钟分割
00001c  2000              MOVS     r0,#0
00001e  f8ad0006          STRH     r0,[sp,#6]
;;;32     		timer_init_config.TIM_CounterMode 			= TIM_CounterMode_Up;	//向上计数方式
000022  f8ad0002          STRH     r0,[sp,#2]
;;;33     		//timer_init_config.TIM_RepetitionCounter 	= 0x0000;//高级定时器使用
;;;34     		TIM_TimeBaseInit(TIM3, &timer_init_config);
000026  4669              MOV      r1,sp
000028  4801              LDR      r0,|L1.48|
00002a  f7fffffe          BL       TIM_TimeBaseInit
                  |L1.46|
;;;35     	}
;;;36     }
00002e  bdfe              POP      {r1-r7,pc}
;;;37     
                          ENDP

                  |L1.48|
                          DCD      0x40000400

                          AREA ||i.timer_init||, CODE, READONLY, ALIGN=2

                  timer_init PROC
;;;72     //---------------------------------------------------------------------------------------------------------------------------------------------
;;;73     void timer_init(uint8_t timer_no)
000000  b510              PUSH     {r4,lr}
;;;74     {
000002  4604              MOV      r4,r0
;;;75     	if (timer_no == 3)
000004  2c03              CMP      r4,#3
000006  d10d              BNE      |L2.36|
;;;76     	{
;;;77     		timer_config(timer_no, 4999, 7199);//计数满载5000 = 500ms;计数频率:72M/7200=10KHz
000008  f641421f          MOV      r2,#0x1c1f
00000c  f2413187          MOV      r1,#0x1387
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       timer_config
;;;78     		timer_nvic_config(timer_no);
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       timer_nvic_config
;;;79     		
;;;80     		TIM_Cmd(TIM3, ENABLE);//开启定时器
00001c  2101              MOVS     r1,#1
00001e  4803              LDR      r0,|L2.44|
000020  f7fffffe          BL       TIM_Cmd
                  |L2.36|
;;;81     	}
;;;82     	
;;;83     	g_timer3_tick = 0;
000024  2000              MOVS     r0,#0
000026  4902              LDR      r1,|L2.48|
000028  8008              STRH     r0,[r1,#0]
;;;84     }
00002a  bd10              POP      {r4,pc}
;;;85     
                          ENDP

                  |L2.44|
                          DCD      0x40000400
                  |L2.48|
                          DCD      g_timer3_tick

                          AREA ||i.timer_nvic_config||, CODE, READONLY, ALIGN=2

                  timer_nvic_config PROC
;;;46     //---------------------------------------------------------------------------------------------------------------------------------------------
;;;47     static void timer_nvic_config(uint8_t timer_no)
000000  b538              PUSH     {r3-r5,lr}
;;;48     {
000002  4604              MOV      r4,r0
;;;49     	NVIC_InitTypeDef nvic_init_config;
;;;50     	
;;;51     	if (timer_no == 3)
000004  2c03              CMP      r4,#3
000006  d113              BNE      |L3.48|
;;;52     	{
;;;53     		//中断优先级 NVIC 设置
;;;54     		nvic_init_config.NVIC_IRQChannel 						= TIM3_IRQn; //TIM3 中断
000008  201d              MOVS     r0,#0x1d
00000a  f88d0000          STRB     r0,[sp,#0]
;;;55     		nvic_init_config.NVIC_IRQChannelPreemptionPriority 		= 2; //先占优先级 2 级
00000e  2002              MOVS     r0,#2
000010  f88d0001          STRB     r0,[sp,#1]
;;;56     		nvic_init_config.NVIC_IRQChannelSubPriority 			= 3; //从优先级 3 级
000014  2003              MOVS     r0,#3
000016  f88d0002          STRB     r0,[sp,#2]
;;;57     		nvic_init_config.NVIC_IRQChannelCmd 					= ENABLE; //IRQ 通道被使能
00001a  2001              MOVS     r0,#1
00001c  f88d0003          STRB     r0,[sp,#3]
;;;58     		NVIC_Init(&nvic_init_config); //④初始化 NVIC 寄存器
000020  4668              MOV      r0,sp
000022  f7fffffe          BL       NVIC_Init
;;;59     		
;;;60     		TIM_ITConfig(TIM3, TIM_IT_Update, ENABLE);//允许更新中断
000026  2201              MOVS     r2,#1
000028  4611              MOV      r1,r2
00002a  4802              LDR      r0,|L3.52|
00002c  f7fffffe          BL       TIM_ITConfig
                  |L3.48|
;;;61     	}
;;;62     }	
000030  bd38              POP      {r3-r5,pc}
;;;63     
                          ENDP

000032  0000              DCW      0x0000
                  |L3.52|
                          DCD      0x40000400

                          AREA ||i.timer_test||, CODE, READONLY, ALIGN=2

                  timer_test PROC
;;;110    
;;;111    void timer_test(void)
000000  b510              PUSH     {r4,lr}
;;;112    {
;;;113    	if (g_timer3_tick /= 2)
000002  490f              LDR      r1,|L4.64|
000004  8808              LDRH     r0,[r1,#0]  ; g_timer3_tick
000006  eb0071d0          ADD      r1,r0,r0,LSR #31
00000a  1049              ASRS     r1,r1,#1
00000c  4a0c              LDR      r2,|L4.64|
00000e  8011              STRH     r1,[r2,#0]
000010  b131              CBZ      r1,|L4.32|
;;;114    	{
;;;115    		Bsp_LedOn(0);
000012  2000              MOVS     r0,#0
000014  f7fffffe          BL       Bsp_LedOn
;;;116    		Bsp_LedOff(1);
000018  2001              MOVS     r0,#1
00001a  f7fffffe          BL       Bsp_LedOff
00001e  e005              B        |L4.44|
                  |L4.32|
;;;117    	}
;;;118    	else 
;;;119    	{
;;;120    		Bsp_LedOn(1);
000020  2001              MOVS     r0,#1
000022  f7fffffe          BL       Bsp_LedOn
;;;121    		Bsp_LedOff(0);
000026  2000              MOVS     r0,#0
000028  f7fffffe          BL       Bsp_LedOff
                  |L4.44|
;;;122    	}
;;;123    	if (g_timer3_tick > 60000)
00002c  4804              LDR      r0,|L4.64|
00002e  8800              LDRH     r0,[r0,#0]  ; g_timer3_tick
000030  f64e2160          MOV      r1,#0xea60
000034  4288              CMP      r0,r1
000036  dd02              BLE      |L4.62|
;;;124    	{
;;;125    		g_timer3_tick = 0;
000038  2000              MOVS     r0,#0
00003a  4901              LDR      r1,|L4.64|
00003c  8008              STRH     r0,[r1,#0]
                  |L4.62|
;;;126    	}
;;;127    }
00003e  bd10              POP      {r4,pc}
;;;128    
                          ENDP

                  |L4.64|
                          DCD      g_timer3_tick
