; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\app_flash.o --asm_dir=.\ --list_dir=.\ --depend=.\app_flash.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\App\inc -I..\Driver\inc -I..\Libraries\CMSIS\Core\inc -I..\Libraries\CMSIS\Device\inc -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\HalIterface\inc -I..\User\inc -I..\Driver\src -ID:\KEIL_ARM_PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -ID:\keil_arm\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=533 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\app_flash.crf ..\App\src\app_flash.c]
                          THUMB

                          AREA ||i.Flash_TestDataInit||, CODE, READONLY, ALIGN=2

                  Flash_TestDataInit PROC
;;;52     //--------------------------------------------------------------------------------------------------------
;;;53     void Flash_TestDataInit(void)
000000  b510              PUSH     {r4,lr}
;;;54     {
;;;55     	u8 usMinData = 0;
000002  2100              MOVS     r1,#0
;;;56     	u8 usMaxData = 0xFF;
000004  22ff              MOVS     r2,#0xff
;;;57     	u16 usCnt = 0;
000006  2000              MOVS     r0,#0
;;;58     
;;;59         for(usCnt = 0; usCnt < 0x100 ; usCnt++)
000008  bf00              NOP      
00000a  e012              B        |L1.50|
                  |L1.12|
;;;60     	{
;;;61     		if(g_WriteReadcnt % 2)
00000c  4c0a              LDR      r4,|L1.56|
00000e  8823              LDRH     r3,[r4,#0]  ; g_WriteReadcnt
000010  eb0374d3          ADD      r4,r3,r3,LSR #31
000014  1064              ASRS     r4,r4,#1
000016  eba30444          SUB      r4,r3,r4,LSL #1
00001a  b124              CBZ      r4,|L1.38|
;;;62     		{
;;;63     			g_WriteData[usCnt] = usMinData;
00001c  4b07              LDR      r3,|L1.60|
00001e  5419              STRB     r1,[r3,r0]
;;;64     			usMinData++;		
000020  1c4b              ADDS     r3,r1,#1
000022  b2d9              UXTB     r1,r3
000024  e003              B        |L1.46|
                  |L1.38|
;;;65     		}
;;;66     		else
;;;67     		{
;;;68     			g_WriteData[usCnt] = usMaxData;
000026  4b05              LDR      r3,|L1.60|
000028  541a              STRB     r2,[r3,r0]
;;;69     			usMaxData--;
00002a  1e53              SUBS     r3,r2,#1
00002c  b2da              UXTB     r2,r3
                  |L1.46|
00002e  1c43              ADDS     r3,r0,#1              ;59
000030  b298              UXTH     r0,r3                 ;59
                  |L1.50|
000032  28ff              CMP      r0,#0xff              ;59
000034  ddea              BLE      |L1.12|
;;;70     		}	
;;;71     		
;;;72     	}
;;;73     }
000036  bd10              POP      {r4,pc}
;;;74     
                          ENDP

                  |L1.56|
                          DCD      g_WriteReadcnt
                  |L1.60|
                          DCD      g_WriteData

                          AREA ||i.W25_CircleWriteRead||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  W25_CircleWriteRead PROC
;;;86     //--------------------------------------------------------------------------------------------------------
;;;87     void W25_CircleWriteRead(uint8_t _ucFlashSize,uint32_t _ulAddr, uint8_t *ucpWBuf, uint8_t *ucpRBuf, uint16_t _usLen)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;88     {
000004  4681              MOV      r9,r0
000006  468a              MOV      r10,r1
000008  4617              MOV      r7,r2
00000a  461d              MOV      r5,r3
00000c  9e0a              LDR      r6,[sp,#0x28]
;;;89         uint16_t usPageSum = 0;	//flash的页数
00000e  f04f0b00          MOV      r11,#0
;;;90         uint16_t usCnt = 0;
000012  2400              MOVS     r4,#0
;;;91     
;;;92     	switch (_ucFlashSize)
000014  f1b90f01          CMP      r9,#1
000018  d009              BEQ      |L2.46|
00001a  f1b90f02          CMP      r9,#2
00001e  d009              BEQ      |L2.52|
000020  f1b90f03          CMP      r9,#3
000024  d009              BEQ      |L2.58|
000026  f1b90f04          CMP      r9,#4
00002a  d10c              BNE      |L2.70|
00002c  e008              B        |L2.64|
                  |L2.46|
;;;93     	{
;;;94     		case FLASH_SIZE_1MBYTE:
;;;95     					usPageSum = MAX_PAGE_1MBYTE;
00002e  f44f5b80          MOV      r11,#0x1000
;;;96     					break;
000032  e009              B        |L2.72|
                  |L2.52|
;;;97     		case FLASH_SIZE_2MBYTE:
;;;98     					usPageSum = MAX_PAGE_2MBYTE;
000034  f44f5b00          MOV      r11,#0x2000
;;;99     					break;
000038  e006              B        |L2.72|
                  |L2.58|
;;;100    		case FLASH_SIZE_4MBYTE:
;;;101    					usPageSum = MAX_PAGE_4MBYTE;
00003a  f44f4b80          MOV      r11,#0x4000
;;;102    					break;
00003e  e003              B        |L2.72|
                  |L2.64|
;;;103    		case FLASH_SIZE_8MBYTE:
;;;104    					usPageSum = MAX_PAGE_8MBYTE;
000040  f44f4b00          MOV      r11,#0x8000
;;;105    		default:
000044  bf00              NOP      
                  |L2.70|
;;;106    					break;
000046  bf00              NOP      
                  |L2.72|
000048  bf00              NOP                            ;96
;;;107    	}
;;;108    
;;;109        printf("Write Data -> \r\n");
00004a  a060              ADR      r0,|L2.460|
00004c  f7fffffe          BL       __2printf
;;;110    	for(usCnt = 0; usCnt < _usLen; usCnt++)
000050  2400              MOVS     r4,#0
000052  e005              B        |L2.96|
                  |L2.84|
;;;111    	{
;;;112    		 printf("0x%02X ", ucpWBuf[usCnt]);	
000054  5d39              LDRB     r1,[r7,r4]
000056  a062              ADR      r0,|L2.480|
000058  f7fffffe          BL       __2printf
00005c  1c60              ADDS     r0,r4,#1              ;110
00005e  b284              UXTH     r4,r0                 ;110
                  |L2.96|
000060  42b4              CMP      r4,r6                 ;110
000062  dbf7              BLT      |L2.84|
;;;113    	}
;;;114    	printf("\r\n");
000064  a060              ADR      r0,|L2.488|
000066  f7fffffe          BL       __2printf
;;;115    	Flash_EraseChip();	//第一次整片擦除
00006a  f7fffffe          BL       Flash_EraseChip
;;;116    	
;;;117    	{
;;;118    		printf("Flash erase is ok! \r\n");
00006e  a05f              ADR      r0,|L2.492|
000070  f7fffffe          BL       __2printf
;;;119    		
;;;120    		Flash_ReadSomeBytes(ucpRBuf, 0x00, 256);
000074  f44f7280          MOV      r2,#0x100
000078  2100              MOVS     r1,#0
00007a  4628              MOV      r0,r5
00007c  f7fffffe          BL       Flash_ReadSomeBytes
;;;121    		
;;;122    		printf("Data is after flash erase: \r\n");
000080  a060              ADR      r0,|L2.516|
000082  f7fffffe          BL       __2printf
;;;123    		for(uint16_t usCnt = 0; usCnt < _usLen ; usCnt++)
000086  f04f0800          MOV      r8,#0
00008a  e011              B        |L2.176|
                  |L2.140|
;;;124    		{
;;;125    			printf("0x%02X ",ucpRBuf[usCnt]);
00008c  f8151008          LDRB     r1,[r5,r8]
000090  a053              ADR      r0,|L2.480|
000092  f7fffffe          BL       __2printf
;;;126    			
;;;127    			if (ucpRBuf[usCnt] == 0xFF)	//验证擦除后的数据
000096  f8150008          LDRB     r0,[r5,r8]
00009a  28ff              CMP      r0,#0xff
00009c  d004              BEQ      |L2.168|
;;;128    			{
;;;129    //				printf("Flash erase verify is ok! \r\n");
;;;130    			}
;;;131    			else 
;;;132    			{
;;;133    				printf("Flash erase is failed! \r\n");
00009e  a061              ADR      r0,|L2.548|
0000a0  f7fffffe          BL       __2printf
;;;134    				while (1);
0000a4  bf00              NOP      
                  |L2.166|
0000a6  e7fe              B        |L2.166|
                  |L2.168|
0000a8  f1080001          ADD      r0,r8,#1              ;123
0000ac  fa1ff880          UXTH     r8,r0                 ;123
                  |L2.176|
0000b0  45b0              CMP      r8,r6                 ;123
0000b2  dbeb              BLT      |L2.140|
;;;135    			}
;;;136    		}
;;;137    		printf("\r\n");
0000b4  a04c              ADR      r0,|L2.488|
0000b6  f7fffffe          BL       __2printf
;;;138    		printf("Flash erase verify is ok! \r\n");
0000ba  a061              ADR      r0,|L2.576|
0000bc  f7fffffe          BL       __2printf
;;;139    	}
;;;140    	
;;;141        for (uint16_t i = 0; i < usPageSum; i++)
0000c0  f04f0800          MOV      r8,#0
0000c4  e07d              B        |L2.450|
                  |L2.198|
;;;142        {
;;;143    		printf("\r\n");
0000c6  a048              ADR      r0,|L2.488|
0000c8  f7fffffe          BL       __2printf
;;;144    		printf("************************---------********************************** \r\n");
0000cc  4864              LDR      r0,|L2.608|
0000ce  f7fffffe          BL       __2printf
;;;145            printf("Flash Addr is 0x%08x \r\n",_ulAddr);
0000d2  4651              MOV      r1,r10
0000d4  a063              ADR      r0,|L2.612|
0000d6  f7fffffe          BL       __2printf
;;;146            Flash_WriteSomeBytes(ucpWBuf, _ulAddr, _usLen);	//写 256 Byte 数据
0000da  4632              MOV      r2,r6
0000dc  4651              MOV      r1,r10
0000de  4638              MOV      r0,r7
0000e0  f7fffffe          BL       Flash_WriteSomeBytes
;;;147    //		Flash_WritePage(ucpWBuf, _ulAddr, _usLen);
;;;148            printf("Write Page %d -> \r\n",i);
0000e4  4641              MOV      r1,r8
0000e6  a065              ADR      r0,|L2.636|
0000e8  f7fffffe          BL       __2printf
;;;149    		for(usCnt = 0; usCnt < _usLen ; usCnt++)
0000ec  2400              MOVS     r4,#0
0000ee  e005              B        |L2.252|
                  |L2.240|
;;;150    		{
;;;151    			printf("0x%02X ", ucpWBuf[usCnt]);	
0000f0  5d39              LDRB     r1,[r7,r4]
0000f2  a03b              ADR      r0,|L2.480|
0000f4  f7fffffe          BL       __2printf
0000f8  1c60              ADDS     r0,r4,#1              ;149
0000fa  b284              UXTH     r4,r0                 ;149
                  |L2.252|
0000fc  42b4              CMP      r4,r6                 ;149
0000fe  dbf7              BLT      |L2.240|
;;;152    		}
;;;153    		printf("\r\n");
000100  a039              ADR      r0,|L2.488|
000102  f7fffffe          BL       __2printf
;;;154    		Sys_delay_ms(500);
000106  f44f70fa          MOV      r0,#0x1f4
00010a  f7fffffe          BL       Sys_delay_ms
;;;155            Flash_ReadSomeBytes(ucpRBuf, _ulAddr, _usLen);	//read 256 byte data 
00010e  4632              MOV      r2,r6
000110  4651              MOV      r1,r10
000112  4628              MOV      r0,r5
000114  f7fffffe          BL       Flash_ReadSomeBytes
;;;156            printf("Read Page %d -> \r\n",i);
000118  4641              MOV      r1,r8
00011a  a05d              ADR      r0,|L2.656|
00011c  f7fffffe          BL       __2printf
;;;157    		for(usCnt = 0; usCnt < _usLen; usCnt++)
000120  2400              MOVS     r4,#0
000122  e005              B        |L2.304|
                  |L2.292|
;;;158    		{
;;;159    			 printf("0x%02X ",ucpRBuf[usCnt]);	
000124  5d29              LDRB     r1,[r5,r4]
000126  a02e              ADR      r0,|L2.480|
000128  f7fffffe          BL       __2printf
00012c  1c60              ADDS     r0,r4,#1              ;157
00012e  b284              UXTH     r4,r0                 ;157
                  |L2.304|
000130  42b4              CMP      r4,r6                 ;157
000132  dbf7              BLT      |L2.292|
;;;160    		}
;;;161            	printf("\r\n");
000134  a02c              ADR      r0,|L2.488|
000136  f7fffffe          BL       __2printf
;;;162            _ulAddr += 0x100;	//地址增加一页
00013a  f50a7a80          ADD      r10,r10,#0x100
;;;163    
;;;164    		for(usCnt = 0; usCnt < _usLen ; usCnt++)
00013e  2400              MOVS     r4,#0
000140  e00d              B        |L2.350|
                  |L2.322|
;;;165    		{
;;;166    			if(ucpWBuf[usCnt] != ucpRBuf[usCnt])	//写入与读出数据作比较
000142  5d38              LDRB     r0,[r7,r4]
000144  5d29              LDRB     r1,[r5,r4]
000146  4288              CMP      r0,r1
000148  d007              BEQ      |L2.346|
;;;167    			{
;;;168    				printf("Flash Write != Read failed!\r\n");
00014a  a056              ADR      r0,|L2.676|
00014c  f7fffffe          BL       __2printf
;;;169    				printf("Check Please!\r\n");
000150  a05c              ADR      r0,|L2.708|
000152  f7fffffe          BL       __2printf
;;;170    				while (1);
000156  bf00              NOP      
                  |L2.344|
000158  e7fe              B        |L2.344|
                  |L2.346|
00015a  1c60              ADDS     r0,r4,#1              ;164
00015c  b284              UXTH     r4,r0                 ;164
                  |L2.350|
00015e  42b4              CMP      r4,r6                 ;164
000160  dbef              BLT      |L2.322|
;;;171    			}	
;;;172    		}
;;;173    		printf("Flash Write == Read sucessed!\r\n");
000162  a05c              ADR      r0,|L2.724|
000164  f7fffffe          BL       __2printf
;;;174    		printf("Flash g_WriteReadcnt is  Running %d \r\n", g_WriteReadcnt);
000168  4862              LDR      r0,|L2.756|
00016a  8801              LDRH     r1,[r0,#0]  ; g_WriteReadcnt
00016c  a062              ADR      r0,|L2.760|
00016e  f7fffffe          BL       __2printf
;;;175    
;;;176    		if(i >= (usPageSum-1))
000172  f1ab0001          SUB      r0,r11,#1
000176  4540              CMP      r0,r8
000178  dc19              BGT      |L2.430|
;;;177    		{
;;;178    			i = 0;
00017a  f04f0800          MOV      r8,#0
;;;179    			g_WriteReadcnt ++;
00017e  485d              LDR      r0,|L2.756|
000180  8800              LDRH     r0,[r0,#0]  ; g_WriteReadcnt
000182  1c40              ADDS     r0,r0,#1
000184  495b              LDR      r1,|L2.756|
000186  8008              STRH     r0,[r1,#0]
;;;180    			Flash_TestDataInit();
000188  f7fffffe          BL       Flash_TestDataInit
;;;181    			printf("Flash 16M Bits is Test Sucessed! \r\n");
00018c  a064              ADR      r0,|L2.800|
00018e  f7fffffe          BL       __2printf
;;;182    			printf("Flash g_WriteReadcnt is %d \r\n", g_WriteReadcnt);
000192  4858              LDR      r0,|L2.756|
000194  8801              LDRH     r1,[r0,#0]  ; g_WriteReadcnt
000196  a06b              ADR      r0,|L2.836|
000198  f7fffffe          BL       __2printf
;;;183    			printf("Flash will go to Next Test\r\n");
00019c  a071              ADR      r0,|L2.868|
00019e  f7fffffe          BL       __2printf
;;;184    			Flash_EraseChip();	//写完整个芯片,擦除一次
0001a2  f7fffffe          BL       Flash_EraseChip
;;;185    			Sys_delay_ms(500);
0001a6  f44f70fa          MOV      r0,#0x1f4
0001aa  f7fffffe          BL       Sys_delay_ms
                  |L2.430|
;;;186    		}
;;;187    		printf("************************@@@@@@@@@********************************** \r\n");
0001ae  4875              LDR      r0,|L2.900|
0001b0  f7fffffe          BL       __2printf
;;;188    		printf("\r\n");
0001b4  a00c              ADR      r0,|L2.488|
0001b6  f7fffffe          BL       __2printf
0001ba  f1080001          ADD      r0,r8,#1              ;141
0001be  fa1ff880          UXTH     r8,r0                 ;141
                  |L2.450|
0001c2  45d8              CMP      r8,r11                ;141
0001c4  f6ffaf7f          BLT      |L2.198|
;;;189        } 
;;;190    }
0001c8  e8bd9ff0          POP      {r4-r12,pc}
;;;191    
                          ENDP

                  |L2.460|
0001cc  57726974          DCB      "Write Data -> \r\n",0
0001d0  65204461
0001d4  7461202d
0001d8  3e200d0a
0001dc  00      
0001dd  00                DCB      0
0001de  00                DCB      0
0001df  00                DCB      0
                  |L2.480|
0001e0  30782530          DCB      "0x%02X ",0
0001e4  32582000
                  |L2.488|
0001e8  0d0a00            DCB      "\r\n",0
0001eb  00                DCB      0
                  |L2.492|
0001ec  466c6173          DCB      "Flash erase is ok! \r\n",0
0001f0  68206572
0001f4  61736520
0001f8  6973206f
0001fc  6b21200d
000200  0a00    
000202  00                DCB      0
000203  00                DCB      0
                  |L2.516|
000204  44617461          DCB      "Data is after flash erase: \r\n",0
000208  20697320
00020c  61667465
000210  7220666c
000214  61736820
000218  65726173
00021c  653a200d
000220  0a00    
000222  00                DCB      0
000223  00                DCB      0
                  |L2.548|
000224  466c6173          DCB      "Flash erase is failed! \r\n",0
000228  68206572
00022c  61736520
000230  69732066
000234  61696c65
000238  6421200d
00023c  0a00    
00023e  00                DCB      0
00023f  00                DCB      0
                  |L2.576|
000240  466c6173          DCB      "Flash erase verify is ok! \r\n",0
000244  68206572
000248  61736520
00024c  76657269
000250  66792069
000254  73206f6b
000258  21200d0a
00025c  00      
00025d  00                DCB      0
00025e  00                DCB      0
00025f  00                DCB      0
                  |L2.608|
                          DCD      ||.conststring||
                  |L2.612|
000264  466c6173          DCB      "Flash Addr is 0x%08x \r\n",0
000268  68204164
00026c  64722069
000270  73203078
000274  25303878
000278  200d0a00
                  |L2.636|
00027c  57726974          DCB      "Write Page %d -> \r\n",0
000280  65205061
000284  67652025
000288  64202d3e
00028c  200d0a00
                  |L2.656|
000290  52656164          DCB      "Read Page %d -> \r\n",0
000294  20506167
000298  65202564
00029c  202d3e20
0002a0  0d0a00  
0002a3  00                DCB      0
                  |L2.676|
0002a4  466c6173          DCB      "Flash Write != Read failed!\r\n",0
0002a8  68205772
0002ac  69746520
0002b0  213d2052
0002b4  65616420
0002b8  6661696c
0002bc  6564210d
0002c0  0a00    
0002c2  00                DCB      0
0002c3  00                DCB      0
                  |L2.708|
0002c4  43686563          DCB      "Check Please!\r\n",0
0002c8  6b20506c
0002cc  65617365
0002d0  210d0a00
                  |L2.724|
0002d4  466c6173          DCB      "Flash Write == Read sucessed!\r\n",0
0002d8  68205772
0002dc  69746520
0002e0  3d3d2052
0002e4  65616420
0002e8  73756365
0002ec  73736564
0002f0  210d0a00
                  |L2.756|
                          DCD      g_WriteReadcnt
                  |L2.760|
0002f8  466c6173          DCB      "Flash g_WriteReadcnt is  Running %d \r\n",0
0002fc  6820675f
000300  57726974
000304  65526561
000308  64636e74
00030c  20697320
000310  2052756e
000314  6e696e67
000318  20256420
00031c  0d0a00  
00031f  00                DCB      0
                  |L2.800|
000320  466c6173          DCB      "Flash 16M Bits is Test Sucessed! \r\n",0
000324  68203136
000328  4d204269
00032c  74732069
000330  73205465
000334  73742053
000338  75636573
00033c  73656421
000340  200d0a00
                  |L2.836|
000344  466c6173          DCB      "Flash g_WriteReadcnt is %d \r\n",0
000348  6820675f
00034c  57726974
000350  65526561
000354  64636e74
000358  20697320
00035c  2564200d
000360  0a00    
000362  00                DCB      0
000363  00                DCB      0
                  |L2.868|
000364  466c6173          DCB      "Flash will go to Next Test\r\n",0
000368  68207769
00036c  6c6c2067
000370  6f20746f
000374  204e6578
000378  74205465
00037c  73740d0a
000380  00      
000381  00                DCB      0
000382  00                DCB      0
000383  00                DCB      0
                  |L2.900|
                          DCD      ||.conststring||+0x48

                          AREA ||i.W25_EraseTest||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  W25_EraseTest PROC
;;;264    //--------------------------------------------------------------------------------------------------------
;;;265    void W25_EraseTest(void)
000000  b510              PUSH     {r4,lr}
;;;266    {
000002  b0c0              SUB      sp,sp,#0x100
;;;267    	uint16_t i = 0;
000004  2400              MOVS     r4,#0
;;;268    	uint8_t ucaTmpBuf[0x100] = {0};
000006  f44f7180          MOV      r1,#0x100
00000a  4668              MOV      r0,sp
00000c  f7fffffe          BL       __aeabi_memclr4
;;;269    	
;;;270    	Flash_EraseChip();	//整片擦除
000010  f7fffffe          BL       Flash_EraseChip
;;;271    	Sys_delay_ms(500);	//擦除之后需要延时
000014  f44f70fa          MOV      r0,#0x1f4
000018  f7fffffe          BL       Sys_delay_ms
;;;272    	Flash_ReadSomeBytes(ucaTmpBuf, 0x00, 0x100);	//读取第一页数据验证
00001c  f44f7280          MOV      r2,#0x100
000020  2100              MOVS     r1,#0
000022  4668              MOV      r0,sp
000024  f7fffffe          BL       Flash_ReadSomeBytes
;;;273    	
;;;274    	for (i = 0; i < 256; i++)
000028  bf00              NOP      
00002a  e012              B        |L3.82|
                  |L3.44|
;;;275    	{
;;;276    		printf("0x%02X ", ucaTmpBuf[i]);
00002c  f81d1004          LDRB     r1,[sp,r4]
000030  a00f              ADR      r0,|L3.112|
000032  f7fffffe          BL       __2printf
;;;277    			
;;;278    		if (ucaTmpBuf[i] == 0xFF)	//验证擦除后的数据
000036  f81d0004          LDRB     r0,[sp,r4]
00003a  28ff              CMP      r0,#0xff
00003c  d007              BEQ      |L3.78|
;;;279    		{
;;;280    //				printf("Flash erase verify is ok! \r\n");
;;;281    		}
;;;282    		else 
;;;283    		{
;;;284    			printf("\r\n");
00003e  a00e              ADR      r0,|L3.120|
000040  f7fffffe          BL       __2printf
;;;285    			printf("Flash erase is failed! \r\n");
000044  a00d              ADR      r0,|L3.124|
000046  f7fffffe          BL       __2printf
;;;286    			while (1);
00004a  bf00              NOP      
                  |L3.76|
00004c  e7fe              B        |L3.76|
                  |L3.78|
00004e  1c60              ADDS     r0,r4,#1              ;274
000050  b284              UXTH     r4,r0                 ;274
                  |L3.82|
000052  2cff              CMP      r4,#0xff              ;274
000054  ddea              BLE      |L3.44|
;;;287    		}
;;;288    	}
;;;289    	printf("\r\n");
000056  a008              ADR      r0,|L3.120|
000058  f7fffffe          BL       __2printf
;;;290    	printf("Flash erase verify is ok! \r\n");
00005c  a00e              ADR      r0,|L3.152|
00005e  f7fffffe          BL       __2printf
;;;291    	memset(ucaTmpBuf, 0, 0x100);
000062  f44f7180          MOV      r1,#0x100
000066  4668              MOV      r0,sp
000068  f7fffffe          BL       __aeabi_memclr4
;;;292    }
00006c  b040              ADD      sp,sp,#0x100
00006e  bd10              POP      {r4,pc}
;;;293    
                          ENDP

                  |L3.112|
000070  30782530          DCB      "0x%02X ",0
000074  32582000
                  |L3.120|
000078  0d0a00            DCB      "\r\n",0
00007b  00                DCB      0
                  |L3.124|
00007c  466c6173          DCB      "Flash erase is failed! \r\n",0
000080  68206572
000084  61736520
000088  69732066
00008c  61696c65
000090  6421200d
000094  0a00    
000096  00                DCB      0
000097  00                DCB      0
                  |L3.152|
000098  466c6173          DCB      "Flash erase verify is ok! \r\n",0
00009c  68206572
0000a0  61736520
0000a4  76657269
0000a8  66792069
0000ac  73206f6b
0000b0  21200d0a
0000b4  00      
0000b5  00                DCB      0
0000b6  00                DCB      0
0000b7  00                DCB      0

                          AREA ||i.W25_WriteReadBytes||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_x
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_longlong_hex
                  W25_WriteReadBytes PROC
;;;200    //--------------------------------------------------------------------------------------------------------
;;;201    void W25_WriteReadBytes(void)
000000  b510              PUSH     {r4,lr}
;;;202    {
000002  b086              SUB      sp,sp,#0x18
;;;203    	uint8_t ucWriteBuf[10] = {0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xAA};
000004  a240              ADR      r2,|L4.264|
000006  ca07              LDM      r2,{r0-r2}
000008  ab03              ADD      r3,sp,#0xc
00000a  c307              STM      r3!,{r0-r2}
;;;204    	uint8_t ucReadBuf[10] = {0};
00000c  2000              MOVS     r0,#0
00000e  9000              STR      r0,[sp,#0]
000010  9001              STR      r0,[sp,#4]
000012  9002              STR      r0,[sp,#8]
;;;205    	
;;;206    	if (g_Count)
000014  483f              LDR      r0,|L4.276|
000016  8800              LDRH     r0,[r0,#0]  ; g_Count
000018  b1e0              CBZ      r0,|L4.84|
;;;207    	{
;;;208    		if (g_ucPos > 250)
00001a  483f              LDR      r0,|L4.280|
00001c  7800              LDRB     r0,[r0,#0]  ; g_ucPos
00001e  28fa              CMP      r0,#0xfa
000020  dd04              BLE      |L4.44|
;;;209    		{
;;;210    			g_Count = 0;
000022  2000              MOVS     r0,#0
000024  493b              LDR      r1,|L4.276|
000026  8008              STRH     r0,[r1,#0]
;;;211    			g_ucPos = 0;
000028  493b              LDR      r1,|L4.280|
00002a  7008              STRB     r0,[r1,#0]
                  |L4.44|
;;;212    		}
;;;213    		
;;;214    		memset(ucWriteBuf, 0, 10);
00002c  2000              MOVS     r0,#0
00002e  9003              STR      r0,[sp,#0xc]
000030  9004              STR      r0,[sp,#0x10]
000032  9005              STR      r0,[sp,#0x14]
;;;215    		memcpy(ucWriteBuf, g_WriteData + g_ucPos, 10);
000034  4839              LDR      r0,|L4.284|
000036  4938              LDR      r1,|L4.280|
000038  7809              LDRB     r1,[r1,#0]  ; g_ucPos
00003a  4408              ADD      r0,r0,r1
00003c  6801              LDR      r1,[r0,#0]
00003e  9103              STR      r1,[sp,#0xc]
000040  6841              LDR      r1,[r0,#4]
000042  9104              STR      r1,[sp,#0x10]
000044  8900              LDRH     r0,[r0,#8]
000046  f8ad0014          STRH     r0,[sp,#0x14]
;;;216    		g_ucPos += 10;
00004a  4833              LDR      r0,|L4.280|
00004c  7800              LDRB     r0,[r0,#0]  ; g_ucPos
00004e  300a              ADDS     r0,r0,#0xa
000050  4931              LDR      r1,|L4.280|
000052  7008              STRB     r0,[r1,#0]
                  |L4.84|
;;;217    	}
;;;218    	
;;;219    	Flash_WriteSomeBytes((uint8_t *)ucWriteBuf, FALSH_TEST_ADDR, 10);
000054  220a              MOVS     r2,#0xa
000056  f44f7180          MOV      r1,#0x100
00005a  a803              ADD      r0,sp,#0xc
00005c  f7fffffe          BL       Flash_WriteSomeBytes
;;;220    	
;;;221    //	Flash_EraseSector(0);
;;;222    //	Flash_WriteNoCheck(ucWriteBuf, FALSH_TEST_ADDR, 10);
;;;223    	printf("Write Data is ---->\r\n");
000060  a02f              ADR      r0,|L4.288|
000062  f7fffffe          BL       __2printf
;;;224    	for (uint16_t i = 0; i < 10; i++)
000066  2400              MOVS     r4,#0
000068  e007              B        |L4.122|
                  |L4.106|
;;;225    	{
;;;226    		printf("Write Data is  % d ----> 0x%02X \r\n", i, ucWriteBuf[i]);
00006a  a803              ADD      r0,sp,#0xc
00006c  5d02              LDRB     r2,[r0,r4]
00006e  4621              MOV      r1,r4
000070  a031              ADR      r0,|L4.312|
000072  f7fffffe          BL       __2printf
000076  1c60              ADDS     r0,r4,#1              ;224
000078  b284              UXTH     r4,r0                 ;224
                  |L4.122|
00007a  2c0a              CMP      r4,#0xa               ;224
00007c  dbf5              BLT      |L4.106|
;;;227    	}
;;;228    	printf("\r\n");
00007e  a036              ADR      r0,|L4.344|
000080  f7fffffe          BL       __2printf
;;;229    	
;;;230    	Sys_delay_ms(500);
000084  f44f70fa          MOV      r0,#0x1f4
000088  f7fffffe          BL       Sys_delay_ms
;;;231    	Flash_ReadSomeBytes(ucReadBuf, FALSH_TEST_ADDR, 10);	//检测是否擦除
00008c  220a              MOVS     r2,#0xa
00008e  f44f7180          MOV      r1,#0x100
000092  4668              MOV      r0,sp
000094  f7fffffe          BL       Flash_ReadSomeBytes
;;;232    	printf("Read Data is ---->\r\n");
000098  a030              ADR      r0,|L4.348|
00009a  f7fffffe          BL       __2printf
;;;233    	for (uint16_t i = 0; i < 10; i++)
00009e  2400              MOVS     r4,#0
0000a0  e007              B        |L4.178|
                  |L4.162|
;;;234    	{
;;;235    		printf("Read Data is  % d ----> 0x%02X \r\n", i, ucReadBuf[i]);
0000a2  f81d2004          LDRB     r2,[sp,r4]
0000a6  4621              MOV      r1,r4
0000a8  a032              ADR      r0,|L4.372|
0000aa  f7fffffe          BL       __2printf
0000ae  1c60              ADDS     r0,r4,#1              ;233
0000b0  b284              UXTH     r4,r0                 ;233
                  |L4.178|
0000b2  2c0a              CMP      r4,#0xa               ;233
0000b4  dbf5              BLT      |L4.162|
;;;236    	}
;;;237    	printf("Read Data is Over\r\n");
0000b6  a038              ADR      r0,|L4.408|
0000b8  f7fffffe          BL       __2printf
;;;238    	printf("\r\n");
0000bc  a026              ADR      r0,|L4.344|
0000be  f7fffffe          BL       __2printf
;;;239    	
;;;240    	for (uint16_t i = 0; i < 10; i++)
0000c2  2400              MOVS     r4,#0
0000c4  e00f              B        |L4.230|
                  |L4.198|
;;;241    	{
;;;242    		if(ucWriteBuf[i] != ucReadBuf[i])	//写入与读出数据作比较
0000c6  a803              ADD      r0,sp,#0xc
0000c8  5d00              LDRB     r0,[r0,r4]
0000ca  f81d1004          LDRB     r1,[sp,r4]
0000ce  4288              CMP      r0,r1
0000d0  d007              BEQ      |L4.226|
;;;243    		{
;;;244    			printf("Flash Write != Read failed!\r\n");
0000d2  a036              ADR      r0,|L4.428|
0000d4  f7fffffe          BL       __2printf
;;;245    			printf("Check please!\r\n");
0000d8  a03c              ADR      r0,|L4.460|
0000da  f7fffffe          BL       __2printf
;;;246    			while (1);
0000de  bf00              NOP      
                  |L4.224|
0000e0  e7fe              B        |L4.224|
                  |L4.226|
0000e2  1c60              ADDS     r0,r4,#1              ;240
0000e4  b284              UXTH     r4,r0                 ;240
                  |L4.230|
0000e6  2c0a              CMP      r4,#0xa               ;240
0000e8  dbed              BLT      |L4.198|
;;;247    		}
;;;248    	}
;;;249    	
;;;250    	printf("W25 operate is ok! \r\n");
0000ea  a03c              ADR      r0,|L4.476|
0000ec  f7fffffe          BL       __2printf
;;;251    	
;;;252    	memset(ucReadBuf, 0, 10);
0000f0  2000              MOVS     r0,#0
0000f2  9000              STR      r0,[sp,#0]
0000f4  9001              STR      r0,[sp,#4]
0000f6  9002              STR      r0,[sp,#8]
;;;253    	g_Count++;
0000f8  4806              LDR      r0,|L4.276|
0000fa  8800              LDRH     r0,[r0,#0]  ; g_Count
0000fc  1c40              ADDS     r0,r0,#1
0000fe  4905              LDR      r1,|L4.276|
000100  8008              STRH     r0,[r1,#0]
;;;254    }
000102  b006              ADD      sp,sp,#0x18
000104  bd10              POP      {r4,pc}
;;;255    
                          ENDP

000106  0000              DCW      0x0000
                  |L4.264|
000108  11223344          DCB      17,"""3DUfw",136,153,170,0
00010c  55667788
000110  99aa00  
000113  00                DCB      0
                  |L4.276|
                          DCD      g_Count
                  |L4.280|
                          DCD      g_ucPos
                  |L4.284|
                          DCD      g_WriteData
                  |L4.288|
000120  57726974          DCB      "Write Data is ---->\r\n",0
000124  65204461
000128  74612069
00012c  73202d2d
000130  2d2d3e0d
000134  0a00    
000136  00                DCB      0
000137  00                DCB      0
                  |L4.312|
000138  57726974          DCB      "Write Data is  % d ----> 0x%02X "
00013c  65204461
000140  74612069
000144  73202025
000148  2064202d
00014c  2d2d2d3e
000150  20307825
000154  30325820
                  |L4.344|
000158  0d0a00            DCB      "\r\n",0
00015b  00                DCB      0
                  |L4.348|
00015c  52656164          DCB      "Read Data is ---->\r\n",0
000160  20446174
000164  61206973
000168  202d2d2d
00016c  2d3e0d0a
000170  00      
000171  00                DCB      0
000172  00                DCB      0
000173  00                DCB      0
                  |L4.372|
000174  52656164          DCB      "Read Data is  % d ----> 0x%02X \r\n",0
000178  20446174
00017c  61206973
000180  20202520
000184  64202d2d
000188  2d2d3e20
00018c  30782530
000190  3258200d
000194  0a00    
000196  00                DCB      0
000197  00                DCB      0
                  |L4.408|
000198  52656164          DCB      "Read Data is Over\r\n",0
00019c  20446174
0001a0  61206973
0001a4  204f7665
0001a8  720d0a00
                  |L4.428|
0001ac  466c6173          DCB      "Flash Write != Read failed!\r\n",0
0001b0  68205772
0001b4  69746520
0001b8  213d2052
0001bc  65616420
0001c0  6661696c
0001c4  6564210d
0001c8  0a00    
0001ca  00                DCB      0
0001cb  00                DCB      0
                  |L4.460|
0001cc  43686563          DCB      "Check please!\r\n",0
0001d0  6b20706c
0001d4  65617365
0001d8  210d0a00
                  |L4.476|
0001dc  57323520          DCB      "W25 operate is ok! \r\n",0
0001e0  6f706572
0001e4  61746520
0001e8  6973206f
0001ec  6b21200d
0001f0  0a00    
0001f2  00                DCB      0
0001f3  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  g_WriteData
                          %        256

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  2a2a2a2a          DCB      "************************---------**********************"
000004  2a2a2a2a
000008  2a2a2a2a
00000c  2a2a2a2a
000010  2a2a2a2a
000014  2a2a2a2a
000018  2d2d2d2d
00001c  2d2d2d2d
000020  2d2a2a2a
000024  2a2a2a2a
000028  2a2a2a2a
00002c  2a2a2a2a
000030  2a2a2a2a
000034  2a2a2a  
000037  2a2a2a2a          DCB      "************ \r\n",0
00003b  2a2a2a2a
00003f  2a2a2a2a
000043  200d0a00
000047  00                DCB      0
000048  2a2a2a2a          DCB      "************************@@@@@@@@@**********************"
00004c  2a2a2a2a
000050  2a2a2a2a
000054  2a2a2a2a
000058  2a2a2a2a
00005c  2a2a2a2a
000060  40404040
000064  40404040
000068  402a2a2a
00006c  2a2a2a2a
000070  2a2a2a2a
000074  2a2a2a2a
000078  2a2a2a2a
00007c  2a2a2a  
00007f  2a2a2a2a          DCB      "************ \r\n",0
000083  2a2a2a2a
000087  2a2a2a2a
00008b  200d0a00

                          AREA ||.data||, DATA, ALIGN=2

                  g_WriteReadcnt
000000  0000              DCW      0x0000
000002  0000              DCB      0x00,0x00
                  g_Count
000004  0000              DCW      0x0000
000006  0000              DCB      0x00,0x00
                  g_ucPos
000008  00                DCB      0x00
