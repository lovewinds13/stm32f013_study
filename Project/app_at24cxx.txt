; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\app_at24cxx.o --asm_dir=.\ --list_dir=.\ --depend=.\app_at24cxx.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\App\inc -I..\Driver\inc -I..\Libraries\CMSIS\Core\inc -I..\Libraries\CMSIS\Device\inc -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\HalIterface\inc -I..\User\inc -I..\Driver\src -ID:\KEIL_ARM_PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -ID:\keil_arm\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=533 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\app_at24cxx.crf ..\App\src\app_at24cxx.c]
                          THUMB

                          AREA ||i.ee_at24cxx_init||, CODE, READONLY, ALIGN=1

                  ee_at24cxx_init PROC
;;;24     //--------------------------------------------------------------------------------------------------------------------------
;;;25     void ee_at24cxx_init(void)
000000  b510              PUSH     {r4,lr}
;;;26     {
;;;27         I2c_Init();
000002  f7fffffe          BL       I2c_Init
;;;28     }
000006  bd10              POP      {r4,pc}
;;;29     
                          ENDP


                          AREA ||i.ee_at24cxx_read_byte||, CODE, READONLY, ALIGN=1

                  ee_at24cxx_read_byte PROC
;;;77     //--------------------------------------------------------------------------------------------------------------------------
;;;78     bool ee_at24cxx_read_byte(uint16_t read_addr)
000000  b570              PUSH     {r4-r6,lr}
;;;79     {
000002  4604              MOV      r4,r0
;;;80         uint8_t ret = 0;
000004  2600              MOVS     r6,#0
;;;81     
;;;82         I2c_Start();
000006  f7fffffe          BL       I2c_Start
;;;83     
;;;84         I2c_SendOneByte(AT24CXX_ADDR | ((read_addr / 256) << 1));    //发送地址高3位(<16K:1010 + p2p1p0 + r/w)
00000a  4625              MOV      r5,r4
00000c  17e1              ASRS     r1,r4,#31
00000e  eb046111          ADD      r1,r4,r1,LSR #24
000012  1209              ASRS     r1,r1,#8
000014  22a0              MOVS     r2,#0xa0
000016  ea420141          ORR      r1,r2,r1,LSL #1
00001a  b2c8              UXTB     r0,r1
00001c  f7fffffe          BL       I2c_SendOneByte
;;;85         if (I2c_WaitAck(I2C_WAIT_TIME) == I2C_NACK)
000020  20c8              MOVS     r0,#0xc8
000022  f7fffffe          BL       I2c_WaitAck
000026  2801              CMP      r0,#1
000028  d101              BNE      |L2.46|
;;;86         {
;;;87             return false;
00002a  2000              MOVS     r0,#0
                  |L2.44|
;;;88         }
;;;89         I2c_SendOneByte(read_addr % 256);
;;;90         if (I2c_WaitAck(I2C_WAIT_TIME) == I2C_NACK)
;;;91         {
;;;92             return false;
;;;93         }
;;;94     
;;;95     	 I2c_Start();
;;;96     	
;;;97         I2c_SendOneByte(AT24CXX_ADDR | 0x01);  //设备地址 + 读操作
;;;98         if (I2c_WaitAck(I2C_WAIT_TIME) == I2C_NACK)
;;;99         {
;;;100            return false;
;;;101        }
;;;102    
;;;103        ret = I2c_RecvOneByte(I2C_NACK);
;;;104    
;;;105        I2c_Stop();
;;;106    	
;;;107    	return ret;
;;;108    }
00002c  bd70              POP      {r4-r6,pc}
                  |L2.46|
00002e  4625              MOV      r5,r4                 ;89
000030  17e1              ASRS     r1,r4,#31             ;89
000032  eb046111          ADD      r1,r4,r1,LSR #24      ;89
000036  1209              ASRS     r1,r1,#8              ;89
000038  eba42101          SUB      r1,r4,r1,LSL #8       ;89
00003c  b2c8              UXTB     r0,r1                 ;89
00003e  f7fffffe          BL       I2c_SendOneByte
000042  20c8              MOVS     r0,#0xc8              ;90
000044  f7fffffe          BL       I2c_WaitAck
000048  2801              CMP      r0,#1                 ;90
00004a  d101              BNE      |L2.80|
00004c  2000              MOVS     r0,#0                 ;92
00004e  e7ed              B        |L2.44|
                  |L2.80|
000050  f7fffffe          BL       I2c_Start
000054  20a1              MOVS     r0,#0xa1              ;97
000056  f7fffffe          BL       I2c_SendOneByte
00005a  20c8              MOVS     r0,#0xc8              ;98
00005c  f7fffffe          BL       I2c_WaitAck
000060  2801              CMP      r0,#1                 ;98
000062  d101              BNE      |L2.104|
000064  2000              MOVS     r0,#0                 ;100
000066  e7e1              B        |L2.44|
                  |L2.104|
000068  2001              MOVS     r0,#1                 ;103
00006a  f7fffffe          BL       I2c_RecvOneByte
00006e  4606              MOV      r6,r0                 ;103
000070  f7fffffe          BL       I2c_Stop
000074  4630              MOV      r0,r6                 ;107
000076  e7d9              B        |L2.44|
;;;109    
                          ENDP


                          AREA ||i.ee_at24cxx_read_some_bytes||, CODE, READONLY, ALIGN=1

                  ee_at24cxx_read_some_bytes PROC
;;;140    //--------------------------------------------------------------------------------------------------------------------------
;;;141    uint16_t ee_at24cxx_read_some_bytes(uint16_t read_addr, uint8_t *pbdata, uint16_t read_length)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;142    {
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;143        uint16_t temp = read_length;
00000a  462f              MOV      r7,r5
;;;144    
;;;145        while (temp--)
00000c  e006              B        |L3.28|
                  |L3.14|
;;;146        {
;;;147            *pbdata++ = ee_at24cxx_read_byte(read_addr);	
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       ee_at24cxx_read_byte
000014  f8040b01          STRB     r0,[r4],#1
;;;148    		read_addr++;	//读出地址递增
000018  1c70              ADDS     r0,r6,#1
00001a  b286              UXTH     r6,r0
                  |L3.28|
00001c  1e38              SUBS     r0,r7,#0              ;145
00001e  f1a70101          SUB      r1,r7,#1              ;145
000022  b28f              UXTH     r7,r1                 ;145
000024  d1f3              BNE      |L3.14|
;;;149        }
;;;150    
;;;151        return read_length;
000026  4628              MOV      r0,r5
;;;152    }
000028  e8bd81f0          POP      {r4-r8,pc}
;;;153    
                          ENDP


                          AREA ||i.ee_at24cxx_test||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  ee_at24cxx_test PROC
;;;163    #define AT_TEST_ADDR 	0x10
;;;164    void ee_at24cxx_test(void)
000000  b570              PUSH     {r4-r6,lr}
;;;165    {
000002  b086              SUB      sp,sp,#0x18
;;;166        uint8_t test_val = 0x55;
000004  2555              MOVS     r5,#0x55
;;;167        uint8_t ret = 0;
000006  2600              MOVS     r6,#0
;;;168    	uint8_t write_buf[10] = {0xcc, 0xaa, 0x66, 0x5a, 0x77, 0x89, 0x33, 0xbb, 0xac, 0xe9};
000008  a219              ADR      r2,|L4.112|
00000a  ca07              LDM      r2,{r0-r2}
00000c  ab03              ADD      r3,sp,#0xc
00000e  c307              STM      r3!,{r0-r2}
;;;169    	uint8_t read_buf[10] = {0};
000010  2000              MOVS     r0,#0
000012  9000              STR      r0,[sp,#0]
000014  9001              STR      r0,[sp,#4]
000016  9002              STR      r0,[sp,#8]
;;;170    
;;;171        ee_at24cxx_write_byte(0x00, test_val);
000018  4629              MOV      r1,r5
00001a  f7fffffe          BL       ee_at24cxx_write_byte
;;;172    	
;;;173    	Sys_delay_ms(10);
00001e  200a              MOVS     r0,#0xa
000020  f7fffffe          BL       Sys_delay_ms
;;;174    
;;;175        ret = ee_at24cxx_read_byte(0x00);
000024  2000              MOVS     r0,#0
000026  f7fffffe          BL       ee_at24cxx_read_byte
00002a  4606              MOV      r6,r0
;;;176    
;;;177        printf("ee at24cxx test val :0x%02x \r\n", ret);
00002c  4631              MOV      r1,r6
00002e  a013              ADR      r0,|L4.124|
000030  f7fffffe          BL       __2printf
;;;178    	
;;;179    	ee_at24cxx_write_some_bytes(AT_TEST_ADDR, write_buf, sizeof(write_buf));
000034  220a              MOVS     r2,#0xa
000036  a903              ADD      r1,sp,#0xc
000038  2010              MOVS     r0,#0x10
00003a  f7fffffe          BL       ee_at24cxx_write_some_bytes
;;;180    	Sys_delay_ms(50);
00003e  2032              MOVS     r0,#0x32
000040  f7fffffe          BL       Sys_delay_ms
;;;181    	ee_at24cxx_read_some_bytes(AT_TEST_ADDR, read_buf, sizeof(write_buf));
000044  220a              MOVS     r2,#0xa
000046  4669              MOV      r1,sp
000048  2010              MOVS     r0,#0x10
00004a  f7fffffe          BL       ee_at24cxx_read_some_bytes
;;;182    	
;;;183    	for (uint16_t i = 0; i < sizeof(write_buf); i++)
00004e  2400              MOVS     r4,#0
000050  e006              B        |L4.96|
                  |L4.82|
;;;184    	{
;;;185    		printf("ee test some byte ---> 0x%02x \r\n", read_buf[i]);
000052  f81d1004          LDRB     r1,[sp,r4]
000056  a011              ADR      r0,|L4.156|
000058  f7fffffe          BL       __2printf
00005c  1c60              ADDS     r0,r4,#1              ;183
00005e  b284              UXTH     r4,r0                 ;183
                  |L4.96|
000060  2c0a              CMP      r4,#0xa               ;183
000062  d3f6              BCC      |L4.82|
;;;186    	}
;;;187    	
;;;188    	printf("\r\n");
000064  a00c              ADR      r0,|L4.152|
000066  f7fffffe          BL       __2printf
;;;189    }
00006a  b006              ADD      sp,sp,#0x18
00006c  bd70              POP      {r4-r6,pc}
;;;190    
                          ENDP

00006e  0000              DCW      0x0000
                  |L4.112|
000070  ccaa665a          DCB      204,170,"fZw",137,"3",187,172,233,0
000074  778933bb
000078  ace900  
00007b  00                DCB      0
                  |L4.124|
00007c  65652061          DCB      "ee at24cxx test val :0x%02x "
000080  74323463
000084  78782074
000088  65737420
00008c  76616c20
000090  3a307825
000094  30327820
                  |L4.152|
000098  0d0a00            DCB      "\r\n",0
00009b  00                DCB      0
                  |L4.156|
00009c  65652074          DCB      "ee test some byte ---> 0x%02x \r\n",0
0000a0  65737420
0000a4  736f6d65
0000a8  20627974
0000ac  65202d2d
0000b0  2d3e2030
0000b4  78253032
0000b8  78200d0a
0000bc  00      
0000bd  00                DCB      0
0000be  00                DCB      0
0000bf  00                DCB      0

                          AREA ||i.ee_at24cxx_write_byte||, CODE, READONLY, ALIGN=1

                  ee_at24cxx_write_byte PROC
;;;39     //--------------------------------------------------------------------------------------------------------------------------
;;;40     bool ee_at24cxx_write_byte(uint16_t write_addr, uint8_t write_byte)
000000  b570              PUSH     {r4-r6,lr}
;;;41     {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;42         I2c_Start();
000006  f7fffffe          BL       I2c_Start
;;;43     
;;;44         I2c_SendOneByte(AT24CXX_ADDR | ((write_addr / 256) << 1));    //发送设备地址+数据地址高3位(<16K:1010 + p2p1p0 + r/w)
00000a  4625              MOV      r5,r4
00000c  17e1              ASRS     r1,r4,#31
00000e  eb046111          ADD      r1,r4,r1,LSR #24
000012  1209              ASRS     r1,r1,#8
000014  22a0              MOVS     r2,#0xa0
000016  ea420141          ORR      r1,r2,r1,LSL #1
00001a  b2c8              UXTB     r0,r1
00001c  f7fffffe          BL       I2c_SendOneByte
;;;45         if (I2c_WaitAck(I2C_WAIT_TIME) == I2C_NACK)
000020  20c8              MOVS     r0,#0xc8
000022  f7fffffe          BL       I2c_WaitAck
000026  2801              CMP      r0,#1
000028  d101              BNE      |L5.46|
;;;46         {
;;;47             return false;
00002a  2000              MOVS     r0,#0
                  |L5.44|
;;;48         }
;;;49         I2c_SendOneByte(write_addr % 256);	//设备地址低8位
;;;50         if (I2c_WaitAck(I2C_WAIT_TIME) == I2C_NACK)
;;;51         {
;;;52             return false;
;;;53         }
;;;54     
;;;55         I2c_SendOneByte(write_byte);    //写入的数据
;;;56         if (I2c_WaitAck(I2C_WAIT_TIME) == I2C_NACK)
;;;57         {
;;;58             return false;
;;;59         }
;;;60     
;;;61         I2c_Stop();
;;;62     	
;;;63     	delay_ms(5  );	//写完一个字节需要延时重新开启总线
;;;64     
;;;65         return true;
;;;66     }
00002c  bd70              POP      {r4-r6,pc}
                  |L5.46|
00002e  4625              MOV      r5,r4                 ;49
000030  17e1              ASRS     r1,r4,#31             ;49
000032  eb046111          ADD      r1,r4,r1,LSR #24      ;49
000036  1209              ASRS     r1,r1,#8              ;49
000038  eba42101          SUB      r1,r4,r1,LSL #8       ;49
00003c  b2c8              UXTB     r0,r1                 ;49
00003e  f7fffffe          BL       I2c_SendOneByte
000042  20c8              MOVS     r0,#0xc8              ;50
000044  f7fffffe          BL       I2c_WaitAck
000048  2801              CMP      r0,#1                 ;50
00004a  d101              BNE      |L5.80|
00004c  2000              MOVS     r0,#0                 ;52
00004e  e7ed              B        |L5.44|
                  |L5.80|
000050  4630              MOV      r0,r6                 ;55
000052  f7fffffe          BL       I2c_SendOneByte
000056  20c8              MOVS     r0,#0xc8              ;56
000058  f7fffffe          BL       I2c_WaitAck
00005c  2801              CMP      r0,#1                 ;56
00005e  d101              BNE      |L5.100|
000060  2000              MOVS     r0,#0                 ;58
000062  e7e3              B        |L5.44|
                  |L5.100|
000064  f7fffffe          BL       I2c_Stop
000068  2005              MOVS     r0,#5                 ;63
00006a  f7fffffe          BL       delay_ms
00006e  2001              MOVS     r0,#1                 ;65
000070  e7dc              B        |L5.44|
;;;67     
                          ENDP


                          AREA ||i.ee_at24cxx_write_some_bytes||, CODE, READONLY, ALIGN=1

                  ee_at24cxx_write_some_bytes PROC
;;;120    //--------------------------------------------------------------------------------------------------------------------------
;;;121    void ee_at24cxx_write_some_bytes(uint16_t write_addr, uint8_t *pbdata, uint16_t write_length)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;122    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;123        for (uint16_t i = 0; i < write_length; i++)
00000a  2400              MOVS     r4,#0
00000c  e007              B        |L6.30|
                  |L6.14|
;;;124        {
;;;125            ee_at24cxx_write_byte(write_addr, pbdata[i]);
00000e  5d31              LDRB     r1,[r6,r4]
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       ee_at24cxx_write_byte
;;;126    		write_addr++;	//写入地址递增
000016  1c68              ADDS     r0,r5,#1
000018  b285              UXTH     r5,r0
00001a  1c60              ADDS     r0,r4,#1              ;123
00001c  b284              UXTH     r4,r0                 ;123
                  |L6.30|
00001e  42bc              CMP      r4,r7                 ;123
000020  dbf5              BLT      |L6.14|
;;;127        }
;;;128    }
000022  e8bd81f0          POP      {r4-r8,pc}
;;;129    
                          ENDP

