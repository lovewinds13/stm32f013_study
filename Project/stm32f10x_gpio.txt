; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\stm32f10x_gpio.o --asm_dir=.\ --list_dir=.\ --depend=.\stm32f10x_gpio.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\App\inc -I..\Driver\inc -I..\Libraries\CMSIS\Core\inc -I..\Libraries\CMSIS\Device\inc -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\HalIterface\inc -I..\User\inc -I..\Driver\src -ID:\KEIL_ARM_PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -ID:\keil_arm\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=533 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\stm32f10x_gpio.crf ..\Libraries\STM32F10x_StdPeriph_Driver\src\stm32f10x_gpio.c]
                          THUMB

                          AREA ||i.GPIO_AFIODeInit||, CODE, READONLY, ALIGN=1

                  GPIO_AFIODeInit PROC
;;;158      */
;;;159    void GPIO_AFIODeInit(void)
000000  b510              PUSH     {r4,lr}
;;;160    {
;;;161      RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
000002  2101              MOVS     r1,#1
000004  4608              MOV      r0,r1
000006  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;162      RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
00000a  2100              MOVS     r1,#0
00000c  2001              MOVS     r0,#1
00000e  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;163    }
000012  bd10              POP      {r4,pc}
;;;164    
                          ENDP


                          AREA ||i.GPIO_DeInit||, CODE, READONLY, ALIGN=2

                  GPIO_DeInit PROC
;;;107      */
;;;108    void GPIO_DeInit(GPIO_TypeDef* GPIOx)
000000  b510              PUSH     {r4,lr}
;;;109    {
000002  4604              MOV      r4,r0
;;;110      /* Check the parameters */
;;;111      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;112      
;;;113      if (GPIOx == GPIOA)
000004  4829              LDR      r0,|L2.172|
000006  4284              CMP      r4,r0
000008  d108              BNE      |L2.28|
;;;114      {
;;;115        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
00000a  2101              MOVS     r1,#1
00000c  2004              MOVS     r0,#4
00000e  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;116        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
000012  2100              MOVS     r1,#0
000014  2004              MOVS     r0,#4
000016  f7fffffe          BL       RCC_APB2PeriphResetCmd
00001a  e046              B        |L2.170|
                  |L2.28|
;;;117      }
;;;118      else if (GPIOx == GPIOB)
00001c  4824              LDR      r0,|L2.176|
00001e  4284              CMP      r4,r0
000020  d108              BNE      |L2.52|
;;;119      {
;;;120        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
000022  2101              MOVS     r1,#1
000024  2008              MOVS     r0,#8
000026  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;121        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
00002a  2100              MOVS     r1,#0
00002c  2008              MOVS     r0,#8
00002e  f7fffffe          BL       RCC_APB2PeriphResetCmd
000032  e03a              B        |L2.170|
                  |L2.52|
;;;122      }
;;;123      else if (GPIOx == GPIOC)
000034  481f              LDR      r0,|L2.180|
000036  4284              CMP      r4,r0
000038  d108              BNE      |L2.76|
;;;124      {
;;;125        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
00003a  2101              MOVS     r1,#1
00003c  2010              MOVS     r0,#0x10
00003e  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;126        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
000042  2100              MOVS     r1,#0
000044  2010              MOVS     r0,#0x10
000046  f7fffffe          BL       RCC_APB2PeriphResetCmd
00004a  e02e              B        |L2.170|
                  |L2.76|
;;;127      }
;;;128      else if (GPIOx == GPIOD)
00004c  481a              LDR      r0,|L2.184|
00004e  4284              CMP      r4,r0
000050  d108              BNE      |L2.100|
;;;129      {
;;;130        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
000052  2101              MOVS     r1,#1
000054  2020              MOVS     r0,#0x20
000056  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;131        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
00005a  2100              MOVS     r1,#0
00005c  2020              MOVS     r0,#0x20
00005e  f7fffffe          BL       RCC_APB2PeriphResetCmd
000062  e022              B        |L2.170|
                  |L2.100|
;;;132      }    
;;;133      else if (GPIOx == GPIOE)
000064  4815              LDR      r0,|L2.188|
000066  4284              CMP      r4,r0
000068  d108              BNE      |L2.124|
;;;134      {
;;;135        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
00006a  2101              MOVS     r1,#1
00006c  2040              MOVS     r0,#0x40
00006e  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;136        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
000072  2100              MOVS     r1,#0
000074  2040              MOVS     r0,#0x40
000076  f7fffffe          BL       RCC_APB2PeriphResetCmd
00007a  e016              B        |L2.170|
                  |L2.124|
;;;137      } 
;;;138      else if (GPIOx == GPIOF)
00007c  4810              LDR      r0,|L2.192|
00007e  4284              CMP      r4,r0
000080  d108              BNE      |L2.148|
;;;139      {
;;;140        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
000082  2101              MOVS     r1,#1
000084  2080              MOVS     r0,#0x80
000086  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;141        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
00008a  2100              MOVS     r1,#0
00008c  2080              MOVS     r0,#0x80
00008e  f7fffffe          BL       RCC_APB2PeriphResetCmd
000092  e00a              B        |L2.170|
                  |L2.148|
;;;142      }
;;;143      else
;;;144      {
;;;145        if (GPIOx == GPIOG)
000094  480b              LDR      r0,|L2.196|
000096  4284              CMP      r4,r0
000098  d107              BNE      |L2.170|
;;;146        {
;;;147          RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
00009a  2101              MOVS     r1,#1
00009c  1580              ASRS     r0,r0,#22
00009e  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;148          RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
0000a2  2100              MOVS     r1,#0
0000a4  15a0              ASRS     r0,r4,#22
0000a6  f7fffffe          BL       RCC_APB2PeriphResetCmd
                  |L2.170|
;;;149        }
;;;150      }
;;;151    }
0000aa  bd10              POP      {r4,pc}
;;;152    
                          ENDP

                  |L2.172|
                          DCD      0x40010800
                  |L2.176|
                          DCD      0x40010c00
                  |L2.180|
                          DCD      0x40011000
                  |L2.184|
                          DCD      0x40011400
                  |L2.188|
                          DCD      0x40011800
                  |L2.192|
                          DCD      0x40011c00
                  |L2.196|
                          DCD      0x40012000

                          AREA ||i.GPIO_ETH_MediaInterfaceConfig||, CODE, READONLY, ALIGN=2

                  GPIO_ETH_MediaInterfaceConfig PROC
;;;629      */
;;;630    void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface) 
000000  4901              LDR      r1,|L3.8|
;;;631    { 
;;;632      assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface)); 
;;;633    
;;;634      /* Configure MII_RMII selection bit */ 
;;;635      *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface; 
000002  6008              STR      r0,[r1,#0]
;;;636    }
000004  4770              BX       lr
;;;637      
                          ENDP

000006  0000              DCW      0x0000
                  |L3.8|
                          DCD      0x422000dc

                          AREA ||i.GPIO_EXTILineConfig||, CODE, READONLY, ALIGN=2

                  GPIO_EXTILineConfig PROC
;;;608      */
;;;609    void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
000000  b530              PUSH     {r4,r5,lr}
;;;610    {
;;;611      uint32_t tmp = 0x00;
000002  2200              MOVS     r2,#0
;;;612      /* Check the parameters */
;;;613      assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
;;;614      assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
;;;615      
;;;616      tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
000004  078b              LSLS     r3,r1,#30
000006  0f1c              LSRS     r4,r3,#28
000008  230f              MOVS     r3,#0xf
00000a  fa03f204          LSL      r2,r3,r4
;;;617      AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
00000e  4b0b              LDR      r3,|L4.60|
000010  108c              ASRS     r4,r1,#2
000012  f8533024          LDR      r3,[r3,r4,LSL #2]
000016  4393              BICS     r3,r3,r2
000018  4c08              LDR      r4,|L4.60|
00001a  108d              ASRS     r5,r1,#2
00001c  f8443025          STR      r3,[r4,r5,LSL #2]
;;;618      AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
000020  4623              MOV      r3,r4
000022  108c              ASRS     r4,r1,#2
000024  f8533024          LDR      r3,[r3,r4,LSL #2]
000028  078c              LSLS     r4,r1,#30
00002a  0f24              LSRS     r4,r4,#28
00002c  fa00f404          LSL      r4,r0,r4
000030  4323              ORRS     r3,r3,r4
000032  4c02              LDR      r4,|L4.60|
000034  108d              ASRS     r5,r1,#2
000036  f8443025          STR      r3,[r4,r5,LSL #2]
;;;619    }
00003a  bd30              POP      {r4,r5,pc}
;;;620    
                          ENDP

                  |L4.60|
                          DCD      0x40010008

                          AREA ||i.GPIO_EventOutputCmd||, CODE, READONLY, ALIGN=2

                  GPIO_EventOutputCmd PROC
;;;482      */
;;;483    void GPIO_EventOutputCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L5.8|
;;;484    {
;;;485      /* Check the parameters */
;;;486      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;487      
;;;488      *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
000002  61c8              STR      r0,[r1,#0x1c]
;;;489    }
000004  4770              BX       lr
;;;490    
                          ENDP

000006  0000              DCW      0x0000
                  |L5.8|
                          DCD      0x42200000

                          AREA ||i.GPIO_EventOutputConfig||, CODE, READONLY, ALIGN=2

                  GPIO_EventOutputConfig PROC
;;;461      */
;;;462    void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
000000  4602              MOV      r2,r0
;;;463    {
;;;464      uint32_t tmpreg = 0x00;
000002  2000              MOVS     r0,#0
;;;465      /* Check the parameters */
;;;466      assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
;;;467      assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
;;;468        
;;;469      tmpreg = AFIO->EVCR;
000004  4b05              LDR      r3,|L6.28|
000006  6818              LDR      r0,[r3,#0]
;;;470      /* Clear the PORT[6:4] and PIN[3:0] bits */
;;;471      tmpreg &= EVCR_PORTPINCONFIG_MASK;
000008  f64f7380          MOV      r3,#0xff80
00000c  4018              ANDS     r0,r0,r3
;;;472      tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
00000e  ea401002          ORR      r0,r0,r2,LSL #4
;;;473      tmpreg |= GPIO_PinSource;
000012  4308              ORRS     r0,r0,r1
;;;474      AFIO->EVCR = tmpreg;
000014  4b01              LDR      r3,|L6.28|
000016  6018              STR      r0,[r3,#0]
;;;475    }
000018  4770              BX       lr
;;;476    
                          ENDP

00001a  0000              DCW      0x0000
                  |L6.28|
                          DCD      0x40010000

                          AREA ||i.GPIO_Init||, CODE, READONLY, ALIGN=1

                  GPIO_Init PROC
;;;172      */
;;;173    void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;174    {
000004  4602              MOV      r2,r0
;;;175      uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
000006  2500              MOVS     r5,#0
000008  2600              MOVS     r6,#0
00000a  2000              MOVS     r0,#0
00000c  2300              MOVS     r3,#0
;;;176      uint32_t tmpreg = 0x00, pinmask = 0x00;
00000e  2400              MOVS     r4,#0
000010  2700              MOVS     r7,#0
;;;177      /* Check the parameters */
;;;178      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;179      assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
;;;180      assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
;;;181      
;;;182    /*---------------------------- GPIO Mode Configuration -----------------------*/
;;;183      currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
000012  f891c003          LDRB     r12,[r1,#3]
000016  f00c050f          AND      r5,r12,#0xf
;;;184      if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
00001a  f891c003          LDRB     r12,[r1,#3]
00001e  f00c0c10          AND      r12,r12,#0x10
000022  f1bc0f00          CMP      r12,#0
000026  d003              BEQ      |L7.48|
;;;185      { 
;;;186        /* Check the parameters */
;;;187        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
;;;188        /* Output mode */
;;;189        currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
000028  f891c002          LDRB     r12,[r1,#2]
00002c  ea4c0505          ORR      r5,r12,r5
                  |L7.48|
;;;190      }
;;;191    /*---------------------------- GPIO CRL Configuration ------------------------*/
;;;192      /* Configure the eight low port pins */
;;;193      if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
000030  f891c000          LDRB     r12,[r1,#0]
000034  f1bc0f00          CMP      r12,#0
000038  d031              BEQ      |L7.158|
;;;194      {
;;;195        tmpreg = GPIOx->CRL;
00003a  6814              LDR      r4,[r2,#0]
;;;196        for (pinpos = 0x00; pinpos < 0x08; pinpos++)
00003c  2000              MOVS     r0,#0
00003e  e02b              B        |L7.152|
                  |L7.64|
;;;197        {
;;;198          pos = ((uint32_t)0x01) << pinpos;
000040  f04f0c01          MOV      r12,#1
000044  fa0cf300          LSL      r3,r12,r0
;;;199          /* Get the port pins position */
;;;200          currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
000048  f8b1c000          LDRH     r12,[r1,#0]
00004c  ea0c0603          AND      r6,r12,r3
;;;201          if (currentpin == pos)
000050  429e              CMP      r6,r3
000052  d120              BNE      |L7.150|
;;;202          {
;;;203            pos = pinpos << 2;
000054  0083              LSLS     r3,r0,#2
;;;204            /* Clear the corresponding low control register bits */
;;;205            pinmask = ((uint32_t)0x0F) << pos;
000056  f04f0c0f          MOV      r12,#0xf
00005a  fa0cf703          LSL      r7,r12,r3
;;;206            tmpreg &= ~pinmask;
00005e  43bc              BICS     r4,r4,r7
;;;207            /* Write the mode configuration in the corresponding bits */
;;;208            tmpreg |= (currentmode << pos);
000060  fa05fc03          LSL      r12,r5,r3
000064  ea4c0404          ORR      r4,r12,r4
;;;209            /* Reset the corresponding ODR bit */
;;;210            if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
000068  f891c003          LDRB     r12,[r1,#3]
00006c  f1bc0f28          CMP      r12,#0x28
000070  d106              BNE      |L7.128|
;;;211            {
;;;212              GPIOx->BRR = (((uint32_t)0x01) << pinpos);
000072  f04f0c01          MOV      r12,#1
000076  fa0cfc00          LSL      r12,r12,r0
00007a  f8c2c014          STR      r12,[r2,#0x14]
00007e  e00a              B        |L7.150|
                  |L7.128|
;;;213            }
;;;214            else
;;;215            {
;;;216              /* Set the corresponding ODR bit */
;;;217              if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
000080  f891c003          LDRB     r12,[r1,#3]
000084  f1bc0f48          CMP      r12,#0x48
000088  d105              BNE      |L7.150|
;;;218              {
;;;219                GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
00008a  f04f0c01          MOV      r12,#1
00008e  fa0cfc00          LSL      r12,r12,r0
000092  f8c2c010          STR      r12,[r2,#0x10]
                  |L7.150|
000096  1c40              ADDS     r0,r0,#1              ;196
                  |L7.152|
000098  2808              CMP      r0,#8                 ;196
00009a  d3d1              BCC      |L7.64|
;;;220              }
;;;221            }
;;;222          }
;;;223        }
;;;224        GPIOx->CRL = tmpreg;
00009c  6014              STR      r4,[r2,#0]
                  |L7.158|
;;;225      }
;;;226    /*---------------------------- GPIO CRH Configuration ------------------------*/
;;;227      /* Configure the eight high port pins */
;;;228      if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
00009e  f8b1c000          LDRH     r12,[r1,#0]
0000a2  f1bc0fff          CMP      r12,#0xff
0000a6  dd34              BLE      |L7.274|
;;;229      {
;;;230        tmpreg = GPIOx->CRH;
0000a8  6854              LDR      r4,[r2,#4]
;;;231        for (pinpos = 0x00; pinpos < 0x08; pinpos++)
0000aa  2000              MOVS     r0,#0
0000ac  e02e              B        |L7.268|
                  |L7.174|
;;;232        {
;;;233          pos = (((uint32_t)0x01) << (pinpos + 0x08));
0000ae  f1000c08          ADD      r12,r0,#8
0000b2  f04f0801          MOV      r8,#1
0000b6  fa08f30c          LSL      r3,r8,r12
;;;234          /* Get the port pins position */
;;;235          currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
0000ba  f8b1c000          LDRH     r12,[r1,#0]
0000be  ea0c0603          AND      r6,r12,r3
;;;236          if (currentpin == pos)
0000c2  429e              CMP      r6,r3
0000c4  d121              BNE      |L7.266|
;;;237          {
;;;238            pos = pinpos << 2;
0000c6  0083              LSLS     r3,r0,#2
;;;239            /* Clear the corresponding high control register bits */
;;;240            pinmask = ((uint32_t)0x0F) << pos;
0000c8  f04f0c0f          MOV      r12,#0xf
0000cc  fa0cf703          LSL      r7,r12,r3
;;;241            tmpreg &= ~pinmask;
0000d0  43bc              BICS     r4,r4,r7
;;;242            /* Write the mode configuration in the corresponding bits */
;;;243            tmpreg |= (currentmode << pos);
0000d2  fa05fc03          LSL      r12,r5,r3
0000d6  ea4c0404          ORR      r4,r12,r4
;;;244            /* Reset the corresponding ODR bit */
;;;245            if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
0000da  f891c003          LDRB     r12,[r1,#3]
0000de  f1bc0f28          CMP      r12,#0x28
0000e2  d105              BNE      |L7.240|
;;;246            {
;;;247              GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
0000e4  f1000c08          ADD      r12,r0,#8
0000e8  fa08f80c          LSL      r8,r8,r12
0000ec  f8c28014          STR      r8,[r2,#0x14]
                  |L7.240|
;;;248            }
;;;249            /* Set the corresponding ODR bit */
;;;250            if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
0000f0  f891c003          LDRB     r12,[r1,#3]
0000f4  f1bc0f48          CMP      r12,#0x48
0000f8  d107              BNE      |L7.266|
;;;251            {
;;;252              GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
0000fa  f1000c08          ADD      r12,r0,#8
0000fe  f04f0801          MOV      r8,#1
000102  fa08f80c          LSL      r8,r8,r12
000106  f8c28010          STR      r8,[r2,#0x10]
                  |L7.266|
00010a  1c40              ADDS     r0,r0,#1              ;231
                  |L7.268|
00010c  2808              CMP      r0,#8                 ;231
00010e  d3ce              BCC      |L7.174|
;;;253            }
;;;254          }
;;;255        }
;;;256        GPIOx->CRH = tmpreg;
000110  6054              STR      r4,[r2,#4]
                  |L7.274|
;;;257      }
;;;258    }
000112  e8bd81f0          POP      {r4-r8,pc}
;;;259    
                          ENDP


                          AREA ||i.GPIO_PinLockConfig||, CODE, READONLY, ALIGN=1

                  GPIO_PinLockConfig PROC
;;;431      */
;;;432    void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  f44f3280          MOV      r2,#0x10000
;;;433    {
;;;434      uint32_t tmp = 0x00010000;
;;;435      
;;;436      /* Check the parameters */
;;;437      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;438      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;439      
;;;440      tmp |= GPIO_Pin;
000004  430a              ORRS     r2,r2,r1
;;;441      /* Set LCKK bit */
;;;442      GPIOx->LCKR = tmp;
000006  6182              STR      r2,[r0,#0x18]
;;;443      /* Reset LCKK bit */
;;;444      GPIOx->LCKR =  GPIO_Pin;
000008  6181              STR      r1,[r0,#0x18]
;;;445      /* Set LCKK bit */
;;;446      GPIOx->LCKR = tmp;
00000a  6182              STR      r2,[r0,#0x18]
;;;447      /* Read LCKK bit*/
;;;448      tmp = GPIOx->LCKR;
00000c  6982              LDR      r2,[r0,#0x18]
;;;449      /* Read LCKK bit*/
;;;450      tmp = GPIOx->LCKR;
00000e  6982              LDR      r2,[r0,#0x18]
;;;451    }
000010  4770              BX       lr
;;;452    
                          ENDP


                          AREA ||i.GPIO_PinRemapConfig||, CODE, READONLY, ALIGN=2

                  GPIO_PinRemapConfig PROC
;;;548      */
;;;549    void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
000000  b5f0              PUSH     {r4-r7,lr}
;;;550    {
000002  460a              MOV      r2,r1
;;;551      uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
000004  2300              MOVS     r3,#0
000006  2400              MOVS     r4,#0
000008  2100              MOVS     r1,#0
00000a  2500              MOVS     r5,#0
;;;552    
;;;553      /* Check the parameters */
;;;554      assert_param(IS_GPIO_REMAP(GPIO_Remap));
;;;555      assert_param(IS_FUNCTIONAL_STATE(NewState));  
;;;556      
;;;557      if((GPIO_Remap & 0x80000000) == 0x80000000)
00000c  f0004600          AND      r6,r0,#0x80000000
000010  f1b64f00          CMP      r6,#0x80000000
000014  d102              BNE      |L9.28|
;;;558      {
;;;559        tmpreg = AFIO->MAPR2;
000016  4e1d              LDR      r6,|L9.140|
000018  69f1              LDR      r1,[r6,#0x1c]
00001a  e001              B        |L9.32|
                  |L9.28|
;;;560      }
;;;561      else
;;;562      {
;;;563        tmpreg = AFIO->MAPR;
00001c  4e1b              LDR      r6,|L9.140|
00001e  6871              LDR      r1,[r6,#4]
                  |L9.32|
;;;564      }
;;;565    
;;;566      tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
000020  f3c04503          UBFX     r5,r0,#16,#4
;;;567      tmp = GPIO_Remap & LSB_MASK;
000024  b283              UXTH     r3,r0
;;;568    
;;;569      if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
000026  f4001640          AND      r6,r0,#0x300000
00002a  f5b61f40          CMP      r6,#0x300000
00002e  d108              BNE      |L9.66|
;;;570      {
;;;571        tmpreg &= DBGAFR_SWJCFG_MASK;
000030  f0216170          BIC      r1,r1,#0xf000000
;;;572        AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
000034  4e15              LDR      r6,|L9.140|
000036  6876              LDR      r6,[r6,#4]
000038  f0266670          BIC      r6,r6,#0xf000000
00003c  4f13              LDR      r7,|L9.140|
00003e  607e              STR      r6,[r7,#4]
000040  e012              B        |L9.104|
                  |L9.66|
;;;573      }
;;;574      else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
000042  f4001680          AND      r6,r0,#0x100000
000046  f5b61f80          CMP      r6,#0x100000
00004a  d106              BNE      |L9.90|
;;;575      {
;;;576        tmp1 = ((uint32_t)0x03) << tmpmask;
00004c  2603              MOVS     r6,#3
00004e  fa06f405          LSL      r4,r6,r5
;;;577        tmpreg &= ~tmp1;
000052  43a1              BICS     r1,r1,r4
;;;578        tmpreg |= ~DBGAFR_SWJCFG_MASK;
000054  f0416170          ORR      r1,r1,#0xf000000
000058  e006              B        |L9.104|
                  |L9.90|
;;;579      }
;;;580      else
;;;581      {
;;;582        tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
00005a  0d46              LSRS     r6,r0,#21
00005c  0136              LSLS     r6,r6,#4
00005e  fa03f606          LSL      r6,r3,r6
000062  43b1              BICS     r1,r1,r6
;;;583        tmpreg |= ~DBGAFR_SWJCFG_MASK;
000064  f0416170          ORR      r1,r1,#0xf000000
                  |L9.104|
;;;584      }
;;;585    
;;;586      if (NewState != DISABLE)
000068  b122              CBZ      r2,|L9.116|
;;;587      {
;;;588        tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
00006a  0d46              LSRS     r6,r0,#21
00006c  0136              LSLS     r6,r6,#4
00006e  fa03f606          LSL      r6,r3,r6
000072  4331              ORRS     r1,r1,r6
                  |L9.116|
;;;589      }
;;;590    
;;;591      if((GPIO_Remap & 0x80000000) == 0x80000000)
000074  f0004600          AND      r6,r0,#0x80000000
000078  f1b64f00          CMP      r6,#0x80000000
00007c  d102              BNE      |L9.132|
;;;592      {
;;;593        AFIO->MAPR2 = tmpreg;
00007e  4e03              LDR      r6,|L9.140|
000080  61f1              STR      r1,[r6,#0x1c]
000082  e001              B        |L9.136|
                  |L9.132|
;;;594      }
;;;595      else
;;;596      {
;;;597        AFIO->MAPR = tmpreg;
000084  4e01              LDR      r6,|L9.140|
000086  6071              STR      r1,[r6,#4]
                  |L9.136|
;;;598      }  
;;;599    }
000088  bdf0              POP      {r4-r7,pc}
;;;600    
                          ENDP

00008a  0000              DCW      0x0000
                  |L9.140|
                          DCD      0x40010000

                          AREA ||i.GPIO_ReadInputData||, CODE, READONLY, ALIGN=1

                  GPIO_ReadInputData PROC
;;;304      */
;;;305    uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
000000  4601              MOV      r1,r0
;;;306    {
;;;307      /* Check the parameters */
;;;308      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;309      
;;;310      return ((uint16_t)GPIOx->IDR);
000002  6888              LDR      r0,[r1,#8]
000004  b280              UXTH     r0,r0
;;;311    }
000006  4770              BX       lr
;;;312    
                          ENDP


                          AREA ||i.GPIO_ReadInputDataBit||, CODE, READONLY, ALIGN=1

                  GPIO_ReadInputDataBit PROC
;;;280      */
;;;281    uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  4602              MOV      r2,r0
;;;282    {
;;;283      uint8_t bitstatus = 0x00;
000002  2000              MOVS     r0,#0
;;;284      
;;;285      /* Check the parameters */
;;;286      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;287      assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
;;;288      
;;;289      if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
000004  6893              LDR      r3,[r2,#8]
000006  400b              ANDS     r3,r3,r1
000008  b10b              CBZ      r3,|L11.14|
;;;290      {
;;;291        bitstatus = (uint8_t)Bit_SET;
00000a  2001              MOVS     r0,#1
00000c  e000              B        |L11.16|
                  |L11.14|
;;;292      }
;;;293      else
;;;294      {
;;;295        bitstatus = (uint8_t)Bit_RESET;
00000e  2000              MOVS     r0,#0
                  |L11.16|
;;;296      }
;;;297      return bitstatus;
;;;298    }
000010  4770              BX       lr
;;;299    
                          ENDP


                          AREA ||i.GPIO_ReadOutputData||, CODE, READONLY, ALIGN=1

                  GPIO_ReadOutputData PROC
;;;342      */
;;;343    uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
000000  4601              MOV      r1,r0
;;;344    {
;;;345      /* Check the parameters */
;;;346      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;347        
;;;348      return ((uint16_t)GPIOx->ODR);
000002  68c8              LDR      r0,[r1,#0xc]
000004  b280              UXTH     r0,r0
;;;349    }
000006  4770              BX       lr
;;;350    
                          ENDP


                          AREA ||i.GPIO_ReadOutputDataBit||, CODE, READONLY, ALIGN=1

                  GPIO_ReadOutputDataBit PROC
;;;319      */
;;;320    uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  4602              MOV      r2,r0
;;;321    {
;;;322      uint8_t bitstatus = 0x00;
000002  2000              MOVS     r0,#0
;;;323      /* Check the parameters */
;;;324      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;325      assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
;;;326      
;;;327      if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
000004  68d3              LDR      r3,[r2,#0xc]
000006  400b              ANDS     r3,r3,r1
000008  b10b              CBZ      r3,|L13.14|
;;;328      {
;;;329        bitstatus = (uint8_t)Bit_SET;
00000a  2001              MOVS     r0,#1
00000c  e000              B        |L13.16|
                  |L13.14|
;;;330      }
;;;331      else
;;;332      {
;;;333        bitstatus = (uint8_t)Bit_RESET;
00000e  2000              MOVS     r0,#0
                  |L13.16|
;;;334      }
;;;335      return bitstatus;
;;;336    }
000010  4770              BX       lr
;;;337    
                          ENDP


                          AREA ||i.GPIO_ResetBits||, CODE, READONLY, ALIGN=1

                  GPIO_ResetBits PROC
;;;373      */
;;;374    void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  6141              STR      r1,[r0,#0x14]
;;;375    {
;;;376      /* Check the parameters */
;;;377      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;378      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;379      
;;;380      GPIOx->BRR = GPIO_Pin;
;;;381    }
000002  4770              BX       lr
;;;382    
                          ENDP


                          AREA ||i.GPIO_SetBits||, CODE, READONLY, ALIGN=1

                  GPIO_SetBits PROC
;;;357      */
;;;358    void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  6101              STR      r1,[r0,#0x10]
;;;359    {
;;;360      /* Check the parameters */
;;;361      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;362      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;363      
;;;364      GPIOx->BSRR = GPIO_Pin;
;;;365    }
000002  4770              BX       lr
;;;366    
                          ENDP


                          AREA ||i.GPIO_StructInit||, CODE, READONLY, ALIGN=1

                  GPIO_StructInit PROC
;;;265      */
;;;266    void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
000000  f64f71ff          MOV      r1,#0xffff
;;;267    {
;;;268      /* Reset GPIO init structure parameters values */
;;;269      GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
000004  8001              STRH     r1,[r0,#0]
;;;270      GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
000006  2102              MOVS     r1,#2
000008  7081              STRB     r1,[r0,#2]
;;;271      GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
00000a  2104              MOVS     r1,#4
00000c  70c1              STRB     r1,[r0,#3]
;;;272    }
00000e  4770              BX       lr
;;;273    
                          ENDP


                          AREA ||i.GPIO_Write||, CODE, READONLY, ALIGN=1

                  GPIO_Write PROC
;;;416      */
;;;417    void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
000000  60c1              STR      r1,[r0,#0xc]
;;;418    {
;;;419      /* Check the parameters */
;;;420      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;421      
;;;422      GPIOx->ODR = PortVal;
;;;423    }
000002  4770              BX       lr
;;;424    
                          ENDP


                          AREA ||i.GPIO_WriteBit||, CODE, READONLY, ALIGN=1

                  GPIO_WriteBit PROC
;;;393      */
;;;394    void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
000000  b10a              CBZ      r2,|L18.6|
;;;395    {
;;;396      /* Check the parameters */
;;;397      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;398      assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
;;;399      assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
;;;400      
;;;401      if (BitVal != Bit_RESET)
;;;402      {
;;;403        GPIOx->BSRR = GPIO_Pin;
000002  6101              STR      r1,[r0,#0x10]
000004  e000              B        |L18.8|
                  |L18.6|
;;;404      }
;;;405      else
;;;406      {
;;;407        GPIOx->BRR = GPIO_Pin;
000006  6141              STR      r1,[r0,#0x14]
                  |L18.8|
;;;408      }
;;;409    }
000008  4770              BX       lr
;;;410    
                          ENDP

